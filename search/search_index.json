{"config":{"lang":["fr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Accueil","text":""},{"location":"#accueil","title":"Accueil","text":""},{"location":"#droits-et-distribution","title":"Droits et distribution","text":"<p>Tout le mat\u00e9riel de ce site (sauf mention contraire) est sous licence Creative Commons 4.0 avec obligation d'attribution, interdiction de r\u00e9utilisation \u00e0 des fins commerciales et partage dans les m\u00eames conditions.</p> <p>  Cirine Chaieb, Fran\u00e7ois Mercier et Alexandre Ouellet | 2025</p>"},{"location":"bases-de-programmation/conversions-types/","title":"Les conversions de types","text":""},{"location":"bases-de-programmation/conversions-types/#les-conversions-de-types","title":"Les conversions de types","text":"<p> Objectifs de la section</p> <p>2-2 Traitements de donn\u00e9es</p> <p> Temps requis</p> <p>10 minutes</p> <p>Il arrive souvent que l'on souhaite convertir d'un type de donn\u00e9es vers un autre. Dans cette section, les conversions entre types natifs (entier, nombre \u00e0 virgule, bool\u00e9en et cha\u00eene de caract\u00e8res) sont abord\u00e9es. </p>"},{"location":"bases-de-programmation/conversions-types/#connaitre-le-type-de-donnees","title":"Conna\u00eetre le type de donn\u00e9es","text":"<p>Pour afficher le type d'une variable, on peut utiliser la fonction <code>type</code> qui accepte un param\u00e8tre, la variable ou la donn\u00e9e \u00e0 tester puis affiche le r\u00e9sultat dans la console.</p> Utilisation de la fonction type<pre><code>print(type(5))          # Affiche &lt;class 'int'&gt; =&gt; Nombre entier\nprint(type(1.5))        # Affiche &lt;class 'float'&gt; =&gt; Nombre \u00e0 virgule\nprint(type(\"Chaine\"))   # Affiche &lt;class 'str'&gt; =&gt; Cha\u00eene de caract\u00e8res\nprint(type(True))       # Affiche &lt;class 'bool'&gt; =&gt; Bool\u00e9en\n</code></pre>"},{"location":"bases-de-programmation/conversions-types/#matrice-des-conversions","title":"Matrice des conversions","text":"<p>Voici un tableau qui pr\u00e9sente le r\u00e9sultat d'une conversion d'un type vers un autre. Pour rappel voici les fonctions de conversion :</p> <ul> <li><code>int</code> : converti en nombre entier</li> <li><code>float</code> : converti en nombre \u00e0 virgule</li> <li><code>str</code> : converti en cha\u00eene de caract\u00e8res</li> <li><code>bool</code> : converti en bool\u00e9en</li> </ul> Conversion  Entier Nombre \u00e0 virgule Cha\u00eene de caract\u00e8res Bool\u00e9en Entier Fonctionne toujours de fa\u00e7on explicite, mais il y a une troncature de la partie d\u00e9cimale. Fonctionne seulement si la cha\u00eene ne contient qu'un nombre entier. <code>True</code> vaut 1, <code>False</code> vaut 0. Nombre \u00e0 virgule Fonctionne toujours, mais peut entra\u00eener une perte de donn\u00e9es pour les grands nombres. Fonctionne seulement si la cha\u00eene contient un nombre entier ou \u00e0 virgule avec un \u00ab\u00a0.\u00a0\u00bb comme s\u00e9parateur de d\u00e9cimales. <code>True</code> vaut 1.0, <code>False</code> vaut 0.0. Cha\u00eene de caract\u00e8res Fonctionne toujours. Fonctionne toujours. <code>True</code> vaut <code>\"True\"</code>, <code>False</code> vaut <code>\"False\"</code>. Bool\u00e9en 0 se converti en <code>False</code>, tous les autres nombres en <code>True</code>. 0.000... se converti en <code>False</code>, tous les autres nombres en <code>True</code>. La cha\u00eene vide est <code>False</code>, toute cha\u00eene non vide est <code>True</code>."},{"location":"bases-de-programmation/conversions-types/#conversion-implicite","title":"Conversion implicite","text":"<p>Certaines conversions se font automatiquement par Python, comme lorsqu'on utilise un nombre entier dans la m\u00eame expression arithm\u00e9tique que des nombres \u00e0 virgule ou les <code>frstring</code> qui appellent la fonction <code>str</code> automatiquement. Certaines fois, ces conversions peuvent \u00eatre responsables d'erreurs : il faut donc se m\u00e9fier du m\u00e9lange de types de donn\u00e9es dans une m\u00eame expression.</p>"},{"location":"bases-de-programmation/entrees-sorties/","title":"Entr\u00e9es et sorties","text":""},{"location":"bases-de-programmation/entrees-sorties/#les-entrees-et-sorties","title":"Les entr\u00e9es et sorties","text":"<p> Contenus de la section</p> <p>Gestion des entr\u00e9es et des sorties \u00e0 la console</p> <p> Temps requis</p> <p>15 minutes</p> <p>Les entr\u00e9es et sorties sont les m\u00e9canismes utilis\u00e9s pour interagir avec la personne qui utilise le programme ou avec d'autres donn\u00e9es num\u00e9riques. Tout au long de la session, nous verrons divers m\u00e9canismes d'entr\u00e9e (saisie au clavier, lecture de fichier...) et de sortie (\u00e9criture \u00e0 la console, \u00e9criture dans un fichier, cr\u00e9ation de graphique...). Dans cette section, nous d\u00e9buterons avec les deux m\u00e9canismes les plus simples :</p> <ul> <li>La lecture de touches au clavier</li> <li>L'\u00e9criture dans la console de messages</li> </ul> <p>Pour acc\u00e9der aux entr\u00e9es et sorties d'un programme, nous aurons besoin d'utiliser des fonctions.</p>"},{"location":"bases-de-programmation/entrees-sorties/#labc-des-fonctions","title":"L'ABC des fonctions","text":"<p>Les fonctions sont des instructions qui permettent d'ex\u00e9cuter un traitement complexe d'une ou plusieurs donn\u00e9es. De fa\u00e7on similaire aux fonctions math\u00e9matiques, les fonctions accepte un ou plusieurs arguments et retourne une valeur. \u00c0 la diff\u00e9rence des fonctions que vous connaissez en math\u00e9matiques, celles en informatique ne sont pas limit\u00e9es au traitement des valeurs num\u00e9riques.</p> <p>Par exemple, la fonction math\u00e9matique \\(f(x) := 2x+1\\) accepte un point (\\(x\\)) et retourne la valeur de l'argument multipli\u00e9e par 2 et augment\u00e9e de 1.</p> <p>En Python, chaque fonction est d\u00e9finit par un identificateur. On indique ses arguments entre parenth\u00e8ses. S'il y en a plusieurs, on les s\u00e9pare par des virgules. Pour r\u00e9cup\u00e9rer le r\u00e9sultat d'une fonction, on peut affecter la fonction \u00e0 une variable.</p> Syntaxe des fonctions<pre><code>ma_fonction()                        # Appel d'une fonction sans argument\nma_fonction(argument1, argument2)    # Appel d'une fonction avec deux arguments\nresultat = ma_fonction()             # Utilisation de la valeur de retour d'une fonction\nresultat = ma_fonction(argument)     # Utilisation de la valeur de retour d'une fonction avec argument\n</code></pre>"},{"location":"bases-de-programmation/entrees-sorties/#les-chaines-de-caracteres","title":"Les cha\u00eenes de caract\u00e8res","text":"<p>Une cha\u00eene de caract\u00e8re permet de traiter du texte avec un langage de programmation. On place le texte entre guillemets anglais <code>\"</code> afin d'indiquer au langage que ces caract\u00e8res ne sont pas des instructions, mais bien des donn\u00e9es.</p> D\u00e9claration d'une variable cha\u00eene de caract\u00e8res<pre><code>variable_chaine = \"Bonjour\"\n</code></pre> <p>Les guillemets anglais</p> <p>Toute les informations entre guillemets anglais repr\u00e9sentent des cha\u00eenes de caract\u00e8res. Pour ins\u00e9rer un guillemet anglais dans une cha\u00eene de caract\u00e8res, celui-ci doit \u00eatre pr\u00e9c\u00e9d\u00e9 du symbole de la barre oblique invers\u00e9e <code>\\</code>.</p> <p>Plus d'informations sur le traitement des cha\u00eenes sont donn\u00e9es dans la section Type de cha\u00eenes de caract\u00e8res et leur manipulation.</p>"},{"location":"bases-de-programmation/entrees-sorties/#lire-une-information-de-la-console","title":"Lire une information de la console","text":"<p> Section 3.1</p> <p>Pour r\u00e9cup\u00e9rer une information saisie par la personne utilisatrice, on utilise la fonction <code>input()</code> qui lit ce qui est entr\u00e9 dans la console jusqu'\u00e0 symbole de retour \u00e0 la ligne (touche Enter). Il faut stocker le r\u00e9sultat de la fonction dans une variable pour pouvoir l'utiliser par la suite. </p> <p>Le r\u00e9sultat de <code>input()</code> est toujours une cha\u00eene de caract\u00e8re. Par exemple, si l'on entre \u00ab\u00a05\u00a0\u00bb au clavier, la valeur est stock\u00e9e dans la cha\u00eene contenant le caract\u00e8re 5 et non commen la valeur num\u00e9rique 5. Pour transformer une cha\u00eene de caract\u00e8re en valeur num\u00e9rique enti\u00e8re, il faut utiliser la fonction <code>int()</code> (la version raccourcie du terme integer, entier).</p> <pre><code>saisie = input()        # Imaginons que 1 est entr\u00e9, alors saisie \n                        # contient \"1\"\nvaleur = int(saisie)    # valeur contient maintenant la valeur \n                        # num\u00e9rique 1\n\nsaisie + 1              # Erreur, on ne peut pas additionner une cha\u00eene\n                        # et un entier \ud83d\udc4e\nvaleur + 1              # Tout \u00e0 fait valide, on peut additionner deux\n                        # entiers \ud83d\udc4d\n</code></pre> <p>Les nombre d\u00e9cimaux</p> <p>Pour lire un nombre d\u00e9cimal, on converti le nombre \u00e0 l'aide de la fonction <code>float</code>. En anglais, le type de nombre d\u00e9cimal est appel\u00e9 floating point number, soit nombre \u00e0 virgule flottante.</p>"},{"location":"bases-de-programmation/entrees-sorties/#afficher-une-information-a-la-console","title":"Afficher une information \u00e0 la console","text":"<p> Section 1.1</p> <p>Pour afficher une donn\u00e9e, on utilise la fonction <code>print</code>. Cette fonction accepte un nombre quelconque de param\u00e8tres. Elle affiche, sur la m\u00eame ligne, l'ensemble des valeurs pass\u00e9es en param\u00e8tres en s\u00e9parant chaque information par un espace.</p> Afficher une information<pre><code>print(\"Bonjour\")                # Affiche \u00ab Bonjour \u00bb dans la console\nprint(\"Bonjour\", \"le\", \"monde\") # Affiche \u00ab Bonjour le monde \u00bb dans la console\nprint(2, \"+\", 2, \"=\", 4)        # Affiche \u00ab 2 + 2 = 4 \u00bb\n</code></pre> <p>Changer le s\u00e9parateur</p> <p>Si l'on souhaite s\u00e9parer des cha\u00eenes par un autre symbole qu'un espace, il faut ajouter un argument nomm\u00e9 \u00e0 la toute fin de la liste des arguments qui indique le s\u00e9parateur \u00e0 utiliser.</p> Utilisation d'un s\u00e9parateur personnalis\u00e9<pre><code>print(2, \"+\", 2, \"=\", 4, sep=\"aaa\")        # Affiche \u00ab 2aaa+aaa2aaa=aaa4 \u00bb\n</code></pre>"},{"location":"bases-de-programmation/entrees-sorties/#exercices","title":"Exercices","text":"<p> Page 27 et suivantes</p> <p>Recommand\u00e9s : 1.1, 1.11</p>"},{"location":"bases-de-programmation/entrees-sorties/#concepts-cles-de-la-section","title":"Concepts cl\u00e9s de la section","text":"<code>entr\u00e9es et sorties</code> m\u00e9canisme avec lequel un programme interragit avec la personne qui l'utilise ou d'autres donn\u00e9es contenus num\u00e9riques."},{"location":"bases-de-programmation/fonctions-mathematiques/","title":"Fonctions math\u00e9matiques","text":""},{"location":"bases-de-programmation/fonctions-mathematiques/#les-fonctions-mathematiques","title":"Les fonctions math\u00e9matiques","text":"<p> Contenus de la section</p> <p>2-2 Traitements de donn\u00e9es</p> <p>Manipulation de nombres</p> <p> Temps requis</p> <p>15 minutes</p>"},{"location":"bases-de-programmation/fonctions-mathematiques/#les-paquets","title":"Les paquets","text":"<p>Python est divis\u00e9 en paquets. Le langage de base en comporte un certain nombre, mais nous nous retrouvons rapidement limit\u00e9s. Les paquets sont des bouts de code cr\u00e9\u00e9s par d'autres programmeurs que l'on peut importer dans notre code pour avoir acc\u00e8s \u00e0 des fonctions suppl\u00e9mentaires.</p>"},{"location":"bases-de-programmation/fonctions-mathematiques/#installer-un-paquet-dans-thonny","title":"Installer un paquet dans Thonny","text":"<p>Pour installer un paquet, on doit se rendre dans le menu Outils &gt; G\u00e9rer les paquets... puis rechercher le paquet \u00e0 installer. Cette \u00e9tape n'est faite que la premi\u00e8re fois que l'on souhaite utiliser un paquet. Par la suite, il suffira de l'importer dans chaque script o\u00f9 l'on souhaite l'utiliser.</p> Fen\u00eatre d'installation de paquet"},{"location":"bases-de-programmation/fonctions-mathematiques/#importer-un-paquet","title":"Importer un paquet","text":"<p>Pour importer les fonctionnalit\u00e9s d'un paquet vers notre fichier, il faut utiliser l'instruction <code>#!import</code>. Cette instruction a diff\u00e9rentes variations selon le r\u00e9sultat recherch\u00e9.</p> Importer des paquet<pre><code># Importation de tout le contenu du module random (g\u00e9n\u00e9ration al\u00e9atoire)\nimport random                   # Permet de travailler avec le module random\nvaleur = random.randint(1, 5)   # G\u00e9n\u00e8re un nombre entier al\u00e9atoire entre 1 et 5\n\n# Importation d'une fonction sp\u00e9cifique\nfrom random import randint      # Permet de travailler avec la fonction randint du module random\nvaleur = randint(1, 5)          # G\u00e9n\u00e8re un nombre entier al\u00e9atoire entre 1 et 5\n\n# Importation d'une fonction sp\u00e9cifique\nfrom random import randint, random      # Permet de travailler avec les fonctions randint et random du module random\nvaleur_entiere = randint(1, 5)          # G\u00e9n\u00e8re un nombre entier al\u00e9atoire entre 1 et 5\nvaleur_continue = random()              # G\u00e9n\u00e8re un nombre d\u00e9cimal al\u00e9atoire entre 0 et 1\n\n# Importation d'un module avec un alias\nimport random as rand           # Permet de travailler avec le module random\nvaleur = rand.randint(1, 5)   # G\u00e9n\u00e8re un nombre entier al\u00e9atoire entre 1 et 5\n\n# Importation d'une fonction avec un alias\nfrom random import randint as entier_alea      # Permet de travailler avec la fonction randint du module random\nvaleur = entier_alea(1, 5)                     # G\u00e9n\u00e8re un nombre entier al\u00e9atoire entre 1 et 5\n</code></pre> <p>Instruction d'importation</p> <p>Les instructions pour importer d'autres fichiers sont toujours les premi\u00e8res (avant la d\u00e9claration des fonctions).</p> <p>Pourquoi importer juste une fonction plut\u00f4t que toujours tout le contenu du module ?</p> <p>Pour \u00e9viter les collisions de noms. Si deux modules d\u00e9clarent une fonction de m\u00eame nom, on peut les distinguer si l'on doit pr\u00e9fixer l'appel du nom du module. Sans cette distinction, Python ne saura laquelle des versions appeler.</p>"},{"location":"bases-de-programmation/fonctions-mathematiques/#la-generation-aleatoire","title":"La g\u00e9n\u00e9ration al\u00e9atoire","text":"<p> Section 2.1</p> <p>Comme vu dans l'exemple pr\u00e9c\u00e9dent, la g\u00e9n\u00e9ration al\u00e9atoire se fait avec le module <code>random</code>. Trois fonctions sont utilis\u00e9es pour g\u00e9n\u00e9rer des nombres, soit la fonction <code>randint</code> pour des nombres entiers et les fonctions <code>random</code> pour une valeur d\u00e9cimale (<code>float</code>) et <code>uniform</code>.</p>"},{"location":"bases-de-programmation/fonctions-mathematiques/#la-fonction-randint","title":"La fonction <code>randint</code>","text":"<p>La fonction <code>randint</code> retourne un nombre al\u00e9atoire entier entre deux bornes incluses.</p> <p></p> Param\u00e8tre Type Description a Entier La valeur minimale de l'intervalle de g\u00e9n\u00e9ration b Entier La valeur minimale de l'intervalle de g\u00e9n\u00e9ration Retour Entier Un nombre N tel que \\(a \\leq N \\leq b\\) <p></p>"},{"location":"bases-de-programmation/fonctions-mathematiques/#la-fonction-random","title":"La fonction <code>random</code>","text":"<p>La fonction <code>random</code> retourne un nombre al\u00e9atoire entre 0 (inclus) et 1 (exclus). Elle n'accepte aucun param\u00e8tre.</p>"},{"location":"bases-de-programmation/fonctions-mathematiques/#la-fonction-uniform","title":"La fonction <code>uniform</code>","text":"<p>La fonction <code>uniform</code> retourne un nombre al\u00e9atoire avec virgule flottante entre deux bornes incluses.</p> <p></p> Param\u00e8tre Type Description a Nombre \u00e0 virgule La valeur minimale de l'intervalle de g\u00e9n\u00e9ration b Nombre \u00e0 virgule La valeur minimale de l'intervalle de g\u00e9n\u00e9ration Retour Nombre \u00e0 virgule Un nombre N tel que \\(a \\leq N \\leq b\\) <p></p> <p>Lancer un d\u00e9</p> <p>Par exemple, pour simuler le lancer d'un d\u00e9 \u00e0 six faces, le code serait le suivant :</p> Lancer d'un d\u00e9<pre><code>from random import randint \nde = randint(1, 6)\n</code></pre> <p>La documentation de random</p> <p>La documentation officielle du paquet <code>random</code> pr\u00e9sente toutes les fonctions de g\u00e9n\u00e9ration al\u00e9atoire du paquet.</p>"},{"location":"bases-de-programmation/fonctions-mathematiques/#les-fonctions-mathematiques_1","title":"Les fonctions math\u00e9matiques","text":"<p> Section 2.2</p> <p>Les fonctions math\u00e9matiques sont pour leur part d\u00e9finies dans le paquet <code>numpy</code>.</p> <p>On y retrouve d'abord les deux constantes universelle \\(\\pi\\) et \\(e\\).</p> <p></p> Constante Expression Valeur \\(\\pi\\) numpy.pi 3.141592653589793 \\(e\\) numpy.e 2.718281828459045 <p></p> <p>L'aire d'un disque</p> <p>Pour calculer l'aire d'un disque de rayon 2 avec toute la pr\u00e9cision possible en Python, on peut utiliser le code suivant :</p> Aire d'un disque<pre><code>from numpy import pi\nrayon = 2\naire_disque = pi * rayon **2\n</code></pre> <p>Le paquet <code>numpy</code> d\u00e9finit aussi plusieurs fonctions math\u00e9matiques usuelles. Elles s'utilisent toutes de la m\u00eame mani\u00e8re, soit en indiquant le nombre en param\u00e8tre sur lequel appliquer la fonction. Le r\u00e9sultat de l'application de la fonction est retourn\u00e9 par la fonction.</p> <p>Les fonctions disponibles sont les suivantes :</p> <p></p> Traitement math\u00e9matique Nom de la fonction Exemple d'utilisation Racine carr\u00e9e sqrt <code>racine = numpy.sqrt(4) # Retourne 2</code> Exponentielle exp <code>puissance = numpy.exp(2) # \u00c9quivalent \u00e0 numpy.e ** 2</code> Logarithme naturel log <code>exposant = numpy.log(4) # \u00c9quivalent \u00e0 ln(4)</code> Logarithme en base 2 ou 10 log2 ou log10 <code>exposant = numpy.log2(8) # Retourne 3</code> Conversion de degres en radians deg2rad ou radians <code>rad = numpy.deg2rad(180) # Retourne 3.1415...</code> Conversion de radians en degres rad2deg ou degrees <code>rad = numpy.rad2deg(numpy.pi) # Retourne 180.0</code> Fonctions trigonom\u00e9triques (angle en radians) sin, cos, tan <code>y = numpy.sin(numpy.pi / 4) # Retourne 0.7071...</code> Fonctions trigonom\u00e9triques inverses (retourne des radians) arcsin, arccos, arctan <code>angle = numpy.arccos(.5) # Retourne 1.047...</code> <p></p>"},{"location":"bases-de-programmation/fonctions-mathematiques/#exercices","title":"Exercices","text":"<p> Page 41 et suivantes</p> <p>Recommand\u00e9s : 2.1, 2.3, 2.4, 2.5, 2.6</p> <p>La documentation de numpy</p> <p>La documentation officielle du paquet <code>numpy</code> pr\u00e9sente toutes les fonctions math\u00e9matiques du paquet.</p>"},{"location":"bases-de-programmation/fonctions/","title":"Les fonctions","text":""},{"location":"bases-de-programmation/fonctions/#les-fonctions","title":"Les fonctions","text":"<p> Objectifs de la section</p> <p>2-5 Fonctions 2-6 Conventions du langage de programmation utilis\u00e9</p> <p> Temps requis</p> <p>20 minutes</p> <p>Comme vu pr\u00e9c\u00e9demment, les fonctions (appel\u00e9es sous-programme dans le livre) permettent d'effectuer certaines manipulations plus complexes, en s\u00e9parant le code en plus petite unit\u00e9. Les grandes forces des fonctions sont qu'elles permettent de :</p> <ul> <li>S\u00e9parer le code en plus petites unit\u00e9s, ce qui augmente la lisibilit\u00e9 et facilite le d\u00e9bogage;</li> <li>R\u00e9utiliser le m\u00eame traitement en appelant la fonction \u00e0 plusieurs endroit, ce qui diminue l'effort de d\u00e9veloppement et r\u00e9duit les erreurs;</li> <li>Encapsuler des traitements pour qu'ils n'aient pas d'effet sur le reste du programme, ce qui r\u00e9duit les erreurs et augmente la flexibilit\u00e9 et la modularit\u00e9 du code (le code ressemble \u00e0 des blocs lego que l'on assemble). </li> </ul>"},{"location":"bases-de-programmation/fonctions/#definir-une-fonction","title":"D\u00e9finir une fonction","text":"<p> Section 3.3 / 3.4</p> <p>Pour d\u00e9finir une fonction, on utilise la syntaxe suivante (noter que ce qui est entre &lt; &gt; est remplac\u00e9 par un identificateur).</p> Syntaxe d'une fonction<pre><code>def &lt;nom_fonction&gt; ():\n    # Instruction de la fonction\n\ndef additionner():\n    1 + 2\n\n# Appel de la fonction\nadditionner()\n</code></pre> <p>Signature</p> <p>La ligne d\u00e9butante par <code>def</code> est appel\u00e9e signature de la fonction. C'est la seule chose qu'il faut conna\u00eetre pour utiliser la fonction.</p>"},{"location":"bases-de-programmation/fonctions/#ajouter-des-parametres","title":"Ajouter des param\u00e8tres","text":"<p>La fonction <code>additionner</code> ci-dessous n'est pas tr\u00e8s int\u00e9ressante : elle additionne toujours les m\u00eames deux nombres ! Une fonction plus utile serait une fonction qui additionne deux nombres quelconques. On doit dans ce cas-l\u00e0 permettre \u00e0 la fonction de s'ex\u00e9cuter sur diverses valeurs. C'est ce que nous ferons avec les param\u00e8tres : ils permettent de transmettre une ou plusieurs valeurs \u00e0 la fonction. Pour d\u00e9clarer qu'une fonction accepte des param\u00e8tres, on doit les d\u00e9clarer dans la signature de la fonction, entre les parenth\u00e8ses.</p> Syntaxe d'une fonction avec des param\u00e8tres<pre><code>def &lt;nom_fonction&gt; (&lt;param_1&gt;, &lt;param_2&gt;, ...):\n    # Instruction de la fonction\n\ndef additionner(operande1, operande2):\n    operande1 + operande2\n\n# Appel de la fonction\nadditionner(1, 2)\n</code></pre> <p>Dans l'exemple ci-dessous, le param\u00e8tre <code>operande1</code> prend la valeur 1, lors de son ex\u00e9cution, car le chiffre 1 est pass\u00e9 \u00e0 la position du param\u00e8tre <code>operande1</code>. On peut aussi utiliser des variables; dans ce cas, la valeur de la variable est utilis\u00e9e.</p> Syntaxe d'une fonction avec des param\u00e8tres<pre><code>nombre_1 = 5\nnombre_2 = 8\n\nadditionner(nombre_1, nombre_2)     # R\u00e9alise l'op\u00e9ration 5 + 8\n</code></pre> <p>Les param\u00e8tres fonctionnent en tout point comme des variables, sauf que si on les modifie, la nouvelle valeur ne se transmet pas hors de la fonction, comme illustr\u00e9 dans la section sur la port\u00e9e des variables.</p>"},{"location":"bases-de-programmation/fonctions/#retourner-une-valeur","title":"Retourner une valeur","text":"<p>La fonction <code>additionner</code>, bien que plus modulaire n'est pas encore tr\u00e8s utile, car on ne peut rien faire avec le r\u00e9sultat de l'op\u00e9ration d'addition. Il serait plus int\u00e9ressant de r\u00e9cup\u00e9rer le r\u00e9sultat de l'op\u00e9ration et de pouvoir le r\u00e9utiliser dans le reste du programme. C'est que l'on peut faire avec l'instruction <code>return</code>. </p> Syntaxe d'une fonction avec une valeur de retour<pre><code>def &lt;nom_fonction&gt; (&lt;param_1&gt;, &lt;param_2&gt;, ...):\n    # Instruction de la fonction\n    return # valeur de retour\n\ndef additionner(operande1, operande2):\n    somme = operande1 + operande2\n    return somme\n\n# Appel de la fonction\nresultat = additionner(1, 2)    \n# La variable resultat prend la valeur de somme \u00e0 la fin de la fonction additionner\n</code></pre>"},{"location":"bases-de-programmation/fonctions/#travailler-avec-des-fonctions","title":"Travailler avec des fonctions","text":"<p>Maintenant que nous avons vu la syntaxe de base des fonctions, nous verrons deux consid\u00e9rations importantes avec les fonctions, soit la port\u00e9e de variables et la documentation.</p>"},{"location":"bases-de-programmation/fonctions/#la-portee-des-variables","title":"La port\u00e9e des variables","text":"<p> Section 3.5</p> <p>Chaque variable est visible (accessible) \u00e0 l'endroit o\u00f9 elle est d\u00e9clar\u00e9e. C'est ce que l'on appelle l'espace de visibilit\u00e9 d'une variable. De plus, la r\u00e8gle qui stipule que chaque identificateur doit \u00eatre unique s'applique uniquement dans un m\u00eame espace : deux variables peuvent porter le m\u00eame nom tant qu'elles ne sont pas dans le m\u00eame espace. On d\u00e9clare un nouvel espace de visibilit\u00e9 chaque fois que l'on d\u00e9clare une fonction. Prenons l'exemple du code suivant, la variable <code>valeur</code> de la <code>fonction</code> n'est pas la m\u00eame que celle de l'espace global.</p> Port\u00e9e des variables<pre><code>def fonction():\n    valeur = 1    \n    print(valeur)\n\nvaleur = 2\nfonction()\nprint(valeur)\n\n# Affiche 1 puis affiche 2\n</code></pre> <p>\u00c9galement, les changements aux param\u00e8tres ne se propagent pas hors de la fonction.</p> Propagation des changements<pre><code>def fonction(valeur):\n    valeur = 1\n\nvaleur = 2\nfonction(valeur)\nprint(valeur)\n\n# Affiche seulement 2, et ce, m\u00eame si l'affectation a bien eu lieu\n</code></pre> <p>Utiliser les variables globales</p> <p>Toutefois, on pourrait quand m\u00eame faire r\u00e9f\u00e9rence \u00e0 une variable globale dans une fonction, mais cela comporte de hauts risques d'erreurs difficiles \u00e0 rep\u00e9rer. En effet, rien ne garantit que la variable globale est dans un \u00e9tat coh\u00e9rent au moment de l'ex\u00e9cution du code.</p> Utilisation d'une variable globale - avec succ\u00e8s<pre><code>def fonction():\n    terme = 1\n    print(terme, valeur)\n\nvaleur = 2\nfonction()      # Affiche 1 2\n</code></pre> <p>En permuttant les lignes 5 et 6, on obtient plut\u00f4t une erreur</p> Utilisation d'une variable globale - avec erreur<pre><code>def fonction():\n    terme = 1\n    print(terme, valeur)\n\nfonction()      # Provoque une erreur \u00ab NameError: name 'valeur' is not defined \u00bb\nvaleur = 2\n</code></pre> <p>La r\u00e8gle \u00e0 respecter est de ne jamais appeler de variables globales dans une fonction : toujours utiliser des param\u00e8tres.</p> <p>Espace de visibilit\u00e9</p> <p>Contrairement \u00e0 plusieurs autres langages de programme, les instructions conditionnelles et les boucles ne d\u00e9clarent pas de nouvel espace de visibilit\u00e9.</p>"},{"location":"bases-de-programmation/fonctions/#documenter-ses-fonctions","title":"Documenter ses fonctions","text":"<p>Documenter ses fonctions</p> <p>En contexte d'\u00e9valuation, il y a toujours des points d\u00e9di\u00e9s \u00e0 la documentation correcte des fonctions. On peut voir cela comme la m\u00e9thodologie de l'informatique.</p> <p>On utilise les <code>docstring</code> pour commenter les fonctions. Une <code>docstring</code> est encapsul\u00e9e par 3 guillemets anglais \u00ab\u00a0\"\u00a0\u00bb. On place la <code>docstring</code> directement sous la signature de la fonction. Elle se compose de trois parties :</p> <ol> <li>La description du but de la fonction. On y explique ce que la fonction fait et non comment elle le fait. Si la description entre sur une ligne, on la place sur  la m\u00eame ligne que les guillemets ouvrants, sinon on commence \u00e0 la ligne suivante.</li> <li>Les param\u00e8tres de la fonction qui sont introduits par le mot-cl\u00e9 \u00ab Param\u00e8tre(s) \u00bb. Ils ont le format <code>nom -- description</code>. S'il n'y a pas de param\u00e8tre, on omet cette partie.</li> <li>La valeur de retour de la fonction introduite par le mot-cl\u00e9 \u00ab Retour \u00bb. S'il n'y a pas de valeur de retour, on omet cette partie.</li> </ol> Exemples de docstring<pre><code># Bon exemple de docstring\ndef additionner(operande1, operande2):\n    \"\"\"Calcule la somme de deux nombres.\n\n    Param\u00e8tres :\n    operande1 -- le premier nombre \u00e0 additionner\n    operande2 -- le second nombre \u00e0 additionner\n\n    Retour :\n    La somme des deux nombres\n    \"\"\"\n    somme = operande1 + operande2\n    return somme\n</code></pre>"},{"location":"bases-de-programmation/fonctions/#exercice","title":"Exercice","text":"<p>Quels sont les erreurs dans la documentation suivante ?</p> Exemples de docstring<pre><code># Bon exemple de docstring\ndef multiplication(operande1, operande2):\n    \"\"\"Multiplie operande1 \u00e0 operande2 puis retourne le r\u00e9sultat et stocke le tout dans une variable appel\u00e9e produit. Par la suite, la variable produit qui contient \n    la multiplication est retourn\u00e9e par la fonction.\n\n    Param\u00e8tres :\n    operande1 : le premier nombre \u00e0 multiplier\n    operande2 :  le second nombre \u00e0 multiplier\n    \"\"\"\n    produit = operande1 * operande2\n    return produit\n</code></pre> Solution <p>Les quatre erreurs sont :</p> <ol> <li>La description d\u00e9crit le fonctionnement du code plut\u00f4t que d'indiquer son intention</li> <li>Une description qui prend plusieurs lignes doit commencer sur la ligne en-dessous des guillemets ouvrants</li> <li>Le symbole entre le nom d'une variable et sa description est --</li> <li>Il manque la description de la valeur de retour</li> </ol>"},{"location":"bases-de-programmation/fonctions/#structurer-un-programme","title":"Structurer un programme","text":"<p>Dans un programme complexe et bien structur\u00e9, il y a tr\u00e8s peu ou aucun code qui n'est pas dans une fonction. Un programme Python n'est qu'une s\u00e9rie de fonctions qui s'appellent entre elles. Pour les programmes plus complexes, on s\u00e9pare m\u00eame les fonctions dans plusieurs fichiers, en regroupant les fonctions qui jouent un r\u00f4le commun dans un m\u00eame fichier.</p>"},{"location":"bases-de-programmation/fonctions/#travailler-avec-plusieurs-fichiers","title":"Travailler avec plusieurs fichiers","text":"<p>Un fichier de code Python constitue en fait ... un paquet ! Tant qu'on enregistre les fichiers dans un m\u00eame r\u00e9pertoire, on peut les importer comme des paquets. Le nom du paquet est simplement le nom du fichier. Par exemple, on code plusieurs fonctions de g\u00e9om\u00e9trie (calcul d'aire, d'angle et de p\u00e9rim\u00e8tre) que l'on enregistre dans un fichier appel\u00e9 <code>geometrie.py</code>. Dans un autre programme, on pourrait inclure la ligne <code>import geometrie</code> pour pouvoir utiliser les fonctions d\u00e9clar\u00e9es dans ce fichier.</p> Exemple de code partager entre plusieurs fichier<pre><code># Fichier geometrie.py\nimport numpy \n\ndef aire_dique(rayon):\n    return numpy.pi * rayon**2\n\ndef aire_carre(cote):\n    return cote**2\n\n#...\n\n# Fichier programme.py\nfrom geometrie import aire_disque, aire_carre\n\ndef calculer_aire_disque():\n    print(\"Quel est le rayon du disque ?\")\n    rayon = float(input())\n    aire = aire_disque(rayon)\n    print(f\"L'aire du disque de rayon {rayon:.2f} est {aire:.2f}.\")\n</code></pre>"},{"location":"bases-de-programmation/fonctions/#enregistrer-mon-fichier-au-bon-endroit","title":"Enregistrer mon fichier au bon endroit","text":"<p>Pour que l'inclusion fonctionne, il faut que les deux fichiers soient enregistr\u00e9s au m\u00eame endroit, sinon l'on doit indiquer le chemin relatif vers le fichier inclus. Pour me d\u00e9placer dans un chemin relatif, on utilise les symboles suivants :</p> <ul> <li><code>/</code> pour changer de r\u00e9pertoire;</li> <li><code>..</code> pour remonter dans un r\u00e9pertoire parent;</li> <li>le nom du r\u00e9pertoire pour acc\u00e9der \u00e0 un r\u00e9pertoire enfant.</li> </ul> <p>Supposons que mon fichier \u00e0 inclure, geometrie.py soit sauvegard\u00e9 dans le dossier Reutilisable qui est lui-m\u00eame dans le dossier Projet Python. On travaille dans le fichier programme.py qui est sauvegard\u00e9 dans le dossier Exercices qui est lui-m\u00eame dans le dossier Projet Python. Pour acc\u00e9der \u00e0 geometrie.py on devrait utiliser l'expression dans le fichier programme.py :</p> <p><code>import ../Reutilisable/geometrie</code></p> <p>Le premier <code>..</code> permet d'indiquer qu'on se d\u00e9place vers le dossier parent de celui qui contient programme.py soit le dossier Projet Python. Ensuite, on se d\u00e9place vers le sous-dossier Reutilisable et finalement on indique le fichier \u00e0 inclure : geometrie.</p>"},{"location":"bases-de-programmation/fonctions/#proteger-ses-fichiers-contre-les-executions-indesirables","title":"Prot\u00e9ger ses fichiers contre les ex\u00e9cutions ind\u00e9sirables","text":"<p>Quand on r\u00e9utilise des fichiers de code (et c'est une bonne pratique \u00e0 faire en g\u00e9n\u00e9ral), on doit prot\u00e9ger nos fichiers des ex\u00e9cutions accidentelles avec une instruction sp\u00e9ciale. Si on ne le fait pas, tout le code global du fichier est ex\u00e9cut\u00e9 \u00e0 chaque fois que le fichier est import\u00e9 ! Ce comportement est source d'erreurs, souvent \u00e9tranges et difficiles \u00e0 rep\u00e9rer. Chaque fichier qui contient du code global devrait d\u00e9finir cette instruction qui permet de pr\u00e9ciser le point d'entr\u00e9e du programme.</p> Point d'entr\u00e9e du programme<pre><code>if __name__ == \"__main__\":\n    # Ici on place le code \u00ab global \u00bb\n</code></pre> <p>Cette instruction assure d'ex\u00e9cuter le code global seulement si ce fichier est le point d'entr\u00e9e de notre programme; s'il est import\u00e9 dans un autre programme, alors on ne l'ex\u00e9cute pas. C'est reconnu comme une bonne pratique \u00e0 faire syst\u00e9matiquement.</p> <p>De plus, on retrouve souvent une seule instruction dans ce bloc : l'appel \u00e0 la fonction qui g\u00e8re le programme.</p>"},{"location":"bases-de-programmation/fonctions/#exemple-de-fichier-pour-faire-des-exercices","title":"Exemple de fichier pour faire des exercices","text":"<p>Voici un exemple de structure de fichier pour r\u00e9aliser tous vos exercices d'une m\u00eame section dans un m\u00eame fichier ou du moins, plusieurs exercices dans un m\u00eame fichier. Faites attention de ne pas vous perdre dans votre code !</p> Regrouper des exercice<pre><code>def exercice_1_1():\n    # Code de l'exercice\n\ndef exercice_1_2():\n    # Code de l'exercice\n\n# ...\n\nif __name__ == \"__main__\":\n    exercice_1_1()\n    # exercice_1_2()\n    # exercice_1_3()\n    # ...\n</code></pre> <p>En commentant le bon appel de fonction, cela vous permet de tester un exercice \u00e0 la fois. De plus, l'encapsulation des fonctions assure que vos variables ne soient pas partag\u00e9es entre plusieurs exercices, tant que vous utilisez toujours des variables locales.</p>"},{"location":"bases-de-programmation/fonctions/#exercices","title":"Exercices","text":"<p> Page 56 et suivantes</p> <p>Recommand\u00e9s : 3.1, 3.2, 3.7, 3.14, 3.1, 3.16, 3.17, 3.18, 3.19, 3.21</p> <p> Page 70 et suivantes</p> <p>Recommand\u00e9s : 4.12, 4.15, 4.17</p>"},{"location":"bases-de-programmation/manipulations-types-simples/","title":"Manipulations des types de donn\u00e9es simples","text":""},{"location":"bases-de-programmation/manipulations-types-simples/#manipulations-des-types-de-donnees-simples","title":"Manipulations des types de donn\u00e9es simples","text":"<p> Contenus de la section</p> <p>2-1 Variables, constantes et types</p> <p>c. Cha\u00eenes de caract\u00e8res</p> <p>2-2 Traitements de donn\u00e9es</p> <p>c. Manipulation de cha\u00eenes de caract\u00e8res (formatage, extraction de sous-cha\u00eenes et concat\u00e9nation)</p> <p> Temps requis</p> <p>25 minutes</p>"},{"location":"bases-de-programmation/manipulations-types-simples/#concatenation-de-chaines","title":"Concat\u00e9nation de cha\u00eenes","text":"<p>L'op\u00e9ration de concat\u00e9nation permet de combiner des cha\u00eenes de caract\u00e8res. On utilise l'op\u00e9rateur d'addition (\u00a0+\u00a0) pour exprimer dans le langage Python l'id\u00e9e de la concat\u00e9nation. Attention, cela ne fonctionne qu'entre deux variables qui contiennent des cha\u00eenes de caract\u00e8res. </p> Concat\u00e9nation de deux cha\u00eenes<pre><code>texte_accueil = \"Bonjour\"\nnom_personne_1 = \"Alice\"\nbonjour_alice = texte_accueil + nom_personne_1\n\nprint(bonjour_alice)        # Affiche BonjourAlice\n</code></pre> <p>On voit que le r\u00e9sultat <code>BonjourAlice</code> n'est pas exactement conforme \u00e0 nos attentes. Tous les caract\u00e8res (espaces, retour \u00e0 la ligne, tabulations) doivent \u00eatre ajout\u00e9s manuellement \u00e0 la cha\u00eene de caract\u00e8res pour s'afficher (et tous les caract\u00e8res ajout\u00e9s s'affichent...).</p> <p></p> Caract\u00e8re d'espacement Symbole Espace \" \" Tabulation \"\\t\" Retour \u00e0 la ligne \"\\n\" <p></p>"},{"location":"bases-de-programmation/manipulations-types-simples/#convertir-un-nombre-en-une-chaine-de-caracteres","title":"Convertir un nombre en une cha\u00eene de caract\u00e8res","text":"<p> Section 1.2</p> <p>Comme mentionn\u00e9 ci-dessus, on ne peut pas directement concat\u00e9ner une cha\u00eene et une valeur num\u00e9rique. Par exemple, la ligne de code suivante provoque une erreur lors de son ex\u00e9cution.</p> <pre><code>print(\"Valeur : \" + 5)          # N'affiche pas \"Valeur : 5\" \n</code></pre> <p>Erreur</p> <p>TypeError: can only concatenate str (not \"int\") to str</p> <p>Pour r\u00e9gler cette erreur, il faut convertir la donn\u00e9e num\u00e9rique en une donn\u00e9e de cha\u00eene de caract\u00e8res avec la fonction <code>str</code> (la version raccourcie du terme anglais string, cha\u00eene de caract\u00e8res).</p> <pre><code>print(\"Valeur : \" + str(5))          # Fonctionne \u00e0 merveille \ud83d\udc4d\n</code></pre>"},{"location":"bases-de-programmation/manipulations-types-simples/#arrondir-les-valeurs","title":"Arrondir les valeurs","text":"<p>Pour pr\u00e9senter une valeur d\u00e9cimale, il peut \u00eatre int\u00e9ressant d'arrondir \u00e0 un certain nombre. La fonction <code>str</code> fera afficher toutes les d\u00e9cimales. Deux autres fonctions existent pour g\u00e9rer les arrondissements soit la fonction <code>round</code> et la fonction <code>format</code>.</p>"},{"location":"bases-de-programmation/manipulations-types-simples/#la-fonction-round","title":"La fonction <code>round</code>","text":"<p>La fonction <code>round</code> permet d'arrondir une valeur \u00e0 un certain nombre de d\u00e9cimales.</p> Param\u00e8tre Type Description number Entier ou nombre \u00e0 virgule La valeur \u00e0 arrondir digits Entier Nombre de d\u00e9cimales \u00e0 conserver apr\u00e8s la virgule Retour Entier ou nombre \u00e0 virgule Le nombre apr\u00e8s l'arrondi Utilisation de l'arrondi<pre><code>somme = 0.1 + 0.1 + 0.1\nprint(str(somme))       \n# Affiche 0.30000000000000004\n\nprint(str(round(somme, 1)))\n# Affiche 0.3\n\nprint(str(round(somme, 3)))\n# Affiche 0.3\n</code></pre> <p>De l'exemple on remarque que les 0 \u00e0 droite ne sont pas conserv\u00e9s. L'avantage de la fonction <code>round</code> est que la valeur reste num\u00e9rique, donc on peut utiliser le r\u00e9sultat dans une autre expression arithm\u00e9tique. Le d\u00e9savantage est qu'il faut la convertir en cha\u00eene de caract\u00e8res pour l'afficher.</p>"},{"location":"bases-de-programmation/manipulations-types-simples/#la-fonction-format","title":"La fonction <code>format</code>","text":"<p>La fonction <code>format</code> permet de formater une valeur en une cha\u00eene de caract\u00e8res, et ce, dans plusieurs contextes. L'un de ces contextes est les nombres \u00e0 virgule. Dans ce cas d'utilisation, on appelle la fonction <code>format</code> avec les deux param\u00e8tres d\u00e9crits ci-dessous.</p> Param\u00e8tre Type Description number Entier ou nombre \u00e0 virgule La valeur \u00e0 arrondir format Cha\u00eene de caract\u00e8res Cha\u00eene indiquant le format \u00e0 respecter Retour Cha\u00eene de caract\u00e8res Le nombre apr\u00e8s le formatage <p>Les formats prennent la forme suivante \".#A\" o\u00f9 \u00ab\u00a0#\u00a0\u00bb repr\u00e9sente le nombre de chiffres significatifs \u00e0 conserver et \u00ab\u00a0A\u00a0\u00bb est le type formatage \u00e0 utiliser. Attention, cette fonction effectue une troncature. Les types de formatage sont :</p> Lettre Type de formatage Exemple d'appel R\u00e9sultat e Notation scientifique avec un \u00ab\u00a0e\u00a0\u00bb minuscule <code>format(10.125, \".2e\")</code> 1.01e+01 e Notation scientifique avec un \u00ab\u00a0E\u00a0\u00bb majuscule <code>format(10.125, \".1E\")</code> 1.0E+01 f Nombre de d\u00e9cimales fixes <code>format(1.125, \".2f\")</code> 1.12 g Format g\u00e9n\u00e9ral avec un nombre de chiffres significatifs <code>format(1.125, \".2g\")</code> 1.1"},{"location":"bases-de-programmation/manipulations-types-simples/#les-f-strings","title":"Les f-strings","text":"<p>Les f-string sont une fa\u00e7on alternative de formater des donn\u00e9es. Au lieu d'utiliser la fonction <code>format</code>, on va indiquer directement dans la cha\u00eene comment formater et int\u00e9grer les donn\u00e9es. On diff\u00e9rentie une f-string en ajoutant la lettre <code>f</code> devant le guillemet ouvrant.</p> <p>Dans un f-string, on inscrit les variables \u00e0 afficher avec des accolades et, si un formatage est n\u00e9cessaire, on indique le format apr\u00e8s un deux-points \u00ab\u00a0:\u00a0\u00bb.</p> Utilisation de f-string<pre><code>operande1 = 4.12\noperande2 = 6.17\nproduit = operande1 * operande2\n\n# Avec la fonction format\nprint(operande1, \"x\", operande2, \"=\", format(produit, \".2f\"))    \n# Avec une f-string\nprint(f\"{operande1} x {operande2} = {produit:.2f}\")\n</code></pre>"},{"location":"bases-de-programmation/manipulations-types-simples/#les-fonctions-sur-les-chaines-de-caracteres","title":"Les fonctions sur les cha\u00eenes de caract\u00e8res","text":"<p> Section 12.3</p> <p>Les cha\u00eenes de caract\u00e8res sont par d\u00e9finition immuables, donc on ne peut pas changer ses \u00e9l\u00e9ments directement apr\u00e8s sa cr\u00e9ation. Pour modifier une cha\u00eene existante, il faut appeler des fonctions sur les cha\u00eenes de caract\u00e8res.</p> <p>Fonctions sur les cha\u00eenes</p> <p>La syntaxe pour appeler une fonction sur une cha\u00eene diff\u00e8re l\u00e9g\u00e8rement de celle d'une fonction standard. On prend la cha\u00eene sur laquelle l'on souhaite appeler la fonction (ou la variable qui contient la cha\u00eene) et on lui appose un point, puis on fait l'appel \u00e0 la fonction.</p> <p>La fonction s'ex\u00e9cute alors pour la cha\u00eene sur laquelle elle est appel\u00e9e.</p> <p>Programmation objet</p> <p>Cette syntaxe diff\u00e9rente provient de la programmation-objet que nous aborderons plus tard au cours de la session. Elle n'est pas l\u00e0 simplement pour m\u00e9langer les programmeuses et programmeurs :P</p>"},{"location":"bases-de-programmation/manipulations-types-simples/#les-fonctions-upper-et-lower","title":"Les fonctions <code>upper</code> et <code>lower</code>","text":"<pre><code>Ces deux fonctions convertissent une cha\u00eene en lettres majuscules (pour `upper`) et en lettres minuscules (pour `lower`). Elles n'acceptent aucun argument et retournent la cha\u00eene modifi\u00e9e. L'op\u00e9ration est sans effet pour les chiffres et les symboles dans les cha\u00eenes.\n</code></pre> Transformation de la casse d'une cha\u00eene<pre><code>texte = \"Bonjour le monde!\"\nprint(texte.upper())    # Affiche \u00abBONJOUR LE MONDE!\u00bb\nprint(texte.lower())    # Affiche \u00abbonjour le monde!\u00bb\n</code></pre>"},{"location":"bases-de-programmation/manipulations-types-simples/#la-fonction-count-pour-compter-les-caracteres","title":"La fonction <code>count</code> pour compter les caract\u00e8res","text":"<p>Cette fonction compte le nombre de sous-cha\u00eenes dans une cha\u00eene. Elle accepte un param\u00e8tre, la sous-cha\u00eene retourn\u00e9e. </p> Param\u00e8tre Type Description sous-cha\u00eene Cha\u00eene de caract\u00e8res Cha\u00eene recherch\u00e9e Retour Entier Le nombre de fois que la sous-cha\u00eene a \u00e9t\u00e9 trouv\u00e9e Exemple d'utilisation de la fonction count<pre><code>chaine = \"Bonjour le monde!\"\nprint(chaine.count(\"o\"))        # Affiche 3\nprint(chaine.count(\"on\"))       # Affiche 2\nprint(chaine.count(\"z\"))        # Affiche 0\n</code></pre>"},{"location":"bases-de-programmation/manipulations-types-simples/#compter-la-longueur-totale-dune-chaine-avec-len","title":"Compter la longueur totale d'une cha\u00eene avec <code>len</code>","text":"<p>Si l'on cherche \u00e0 conna\u00eetre la longueur totale, il faut utiliser la fonction <code>len</code>. Elle calcule le nombre de caract\u00e8res dans la cha\u00eene, incluant les espaces et autres caract\u00e8res blancs. Attention, il s'agit d'une fonction standard !</p> Param\u00e8tre Type Description cha\u00eene Cha\u00eene de caract\u00e8res La cha\u00eene pour laquelle calculer la longueur Retour Entier Le nombre de caract\u00e8res dans la cha\u00eene Exemple d'utilisation de la fonction len<pre><code>chaine = \"Bonjour le monde!\"\nprint(len(chaine))  # Affiche 17\n</code></pre>"},{"location":"bases-de-programmation/manipulations-types-simples/#trouver-une-sous-chaine-dans-une-chaine-avec-find","title":"Trouver une sous-cha\u00eene dans une cha\u00eene avec <code>find</code>","text":"<p>La fonction <code>find</code> d\u00e9termine si une sous-cha\u00eene est contenue dans une cha\u00eene et retourne la position de la premi\u00e8re occurrence.  </p> Param\u00e8tre Type Description sous-cha\u00eene Cha\u00eene de caract\u00e8res La sous-cha\u00eene recherch\u00e9e Retour Entier La position de la premi\u00e8re occurrence ou -1 si la sous-cha\u00eene n'est pas contenue dans la cha\u00eene. Exemple d'utilisation de la fonction find<pre><code>chaine = \"Bonjour le monde!\"\nprint(chaine.find(\"o\"))     # Affiche 1\nprint(chaine.find(\"our\"))   # Affiche 4\nprint(chaine.find(\"??\"))     # Affiche -1 \n</code></pre>"},{"location":"bases-de-programmation/manipulations-types-simples/#remplace-une-sous-chaine-par-une-autre-avec-replace","title":"Remplace une sous-cha\u00eene par une autre avec <code>replace</code>","text":"<p>La fonction <code>replace</code> permet de remplacer des valeurs par d'autres dans une cha\u00eene de caract\u00e8res.</p> Param\u00e8tre Type Description recherche Cha\u00eene de caract\u00e8res La sous-cha\u00eene recherch\u00e9e. remplacement Cha\u00eene de caract\u00e8res La sous-cha\u00eene \u00e0 utiliser pour remplacer les valeurs. Retour Cha\u00eene de caract\u00e8res La cha\u00eene de caract\u00e8re apr\u00e8s avoir effectu\u00e9 le remplacement. Exemple d'utilisation de la fonction replace<pre><code>chaine = \"Bonjour le monde!\"\nprint(chaine.replace(\"o\", \"y\"))     # Affiche \u00abBynjyur le mynde!\u00bb\nprint(chaine.replace(\"our\", \"eu\"))  # Affiche \u00abBonjeu le monde!\u00bb\nprint(chaine.replace(\"our\", \"\"))    # Affiche \u00abBonj le monde!\u00bb\nprint(chaine.replace(\"x\", \"ks\"))    # Affiche \u00ab Bonjour le monde!\u00bb\n</code></pre>"},{"location":"bases-de-programmation/manipulations-types-simples/#un-premier-programme","title":"Un premier programme","text":"<p>Demandez \u00e0 une personne utilisatrice de saisir deux nombres entiers ou d\u00e9cimaux dans la console, multipliez ces nombres et affichez le produit obtenu, avec au plus deux d\u00e9cimales.</p> Solution Calculatrice<pre><code># Saisie des informations\nprint(\"Entrez le premier nombre a multiplier :\")\noperande_gauche = float(input())\n\nprint(\"Entrez le second nombre a multiplier :\")\noperande_droite = float(input())\n\n# Calcul et affichage\nproduit = operande_gauche * operande_droite\nprint(\"Le produit est : \" + str(round(produit, 2)))\n</code></pre>"},{"location":"bases-de-programmation/manipulations-types-simples/#exercices","title":"Exercices","text":"<p> Page 27 et suivantes</p> <p>Recommand\u00e9s : 1.7, 1.8, 1.11, 1.12, 1.17 Suppl\u00e9mentaires : 1.18, 1.21, 1.22</p>"},{"location":"bases-de-programmation/type-booleens-instructions-conditionnelles/","title":"Type bool\u00e9en et instructions conditionnelles","text":""},{"location":"bases-de-programmation/type-booleens-instructions-conditionnelles/#les-instructions-conditionnelles","title":"Les instructions conditionnelles","text":"<p> Objectifs de la section</p> <p>2-1 Variables, constantes et types</p> <p>c. Cha\u00eenes de caract\u00e8res</p> <p>2-2 Traitements de donn\u00e9es</p> <p>b. Alg\u00e8bre bool\u00e9enne</p> <p>2-4 Traitements conditionnels 2-6 Conventions du langage de programmation utilis\u00e9</p> <p> Temps requis</p> <p>50 minutes</p>"},{"location":"bases-de-programmation/type-booleens-instructions-conditionnelles/#les-variables-booleennes-et-leurs-operateurs-booleens","title":"Les variables bool\u00e9ennes et leurs op\u00e9rateurs bool\u00e9ens","text":"<p> Section 4.1</p> <p>Une variable bool\u00e9enne est une variable qui peut prendre deux \u00e9tats : vrai (<code>True</code> | V) ou faux (<code>False</code> | F). On utilise tr\u00e8s r\u00e9guli\u00e8rement ces variables afin de, par exemple, d\u00e9terminer si une op\u00e9ration doit \u00eatre ex\u00e9cut\u00e9e, un certain param\u00e8tre a \u00e9t\u00e9 demand\u00e9 ... (la r\u00e9ponse est oui ou non).</p> <p>Syntaxe</p> <p>Notez la majuscule au d\u00e9but de <code>True</code> et <code>False</code> : elle est importante, car Python est sensible \u00e0 la casse.</p> <p>Les op\u00e9rateurs arithm\u00e9tiques ne s'appliquent pas aux variables bool\u00e9ennes, ils d\u00e9finissent plut\u00f4t leurs propres op\u00e9rateurs. De la m\u00eame mani\u00e8re qu'un op\u00e9rateur arithm\u00e9tique binaire accepte deux nombres et retourne un autre nombre, un op\u00e9rateur bool\u00e9en binaire accepte deux bool\u00e9ens et retourne un bool\u00e9en. </p>"},{"location":"bases-de-programmation/type-booleens-instructions-conditionnelles/#tables-de-verite","title":"Tables de v\u00e9rit\u00e9","text":"<p>On utilise une table de v\u00e9rit\u00e9 pour repr\u00e9senter le r\u00e9sultat de l'\u00e9valuation d'une expression logique. Dans une table de v\u00e9rit\u00e9, on pr\u00e9sente toutes les combinaisons possibles de valeurs bool\u00e9ennes (vrai ou faux pour chaque variable) et l'on indique ensuite le r\u00e9sultat de l'\u00e9valuation. </p> <p></p> <p>Exemple - Table de v\u00e9rit\u00e9</p> a b a op\u00e9rateur b F F ? F V ? V F ? V V ? <p></p>"},{"location":"bases-de-programmation/type-booleens-instructions-conditionnelles/#operateur-de-conjonction-et","title":"Op\u00e9rateur de conjonction (ET)","text":"<p>L'op\u00e9rateur de conjonction retourne vrai seulement si les deux op\u00e9randes sont vrais et faux dans tous les autres cas. On le note en Python par le mot cl\u00e9 <code>and</code>.</p> <p></p> <p>Table de v\u00e9rit\u00e9 de l'op\u00e9rateur de conjonction</p> a b a <code>and</code> b F F F F V F V F F V V V <p></p>"},{"location":"bases-de-programmation/type-booleens-instructions-conditionnelles/#operateur-de-disjonction-ou","title":"Op\u00e9rateur de disjonction (OU)","text":"<p>L'op\u00e9rateur de disjonction  retourne vrai d\u00e8s que l'un ou l'autre des op\u00e9randes est vrai et faux seulement si les deux op\u00e9randes sont faux. On le note en Python par le mot cl\u00e9 <code>or</code>.</p> <p>Le \u00ab ou \u00bb dans le langage courant</p> <p>En fran\u00e7ais, le mot \u00ab ou \u00bb implique de faire un choix entre deux options, mais souvent on ne peut pas prendre les deux en m\u00eame temps. En math\u00e9matiques et en informatique, cela correspond au \u00ab ou exclusif \u00bb, le \u00ab ou \u00bb logique qu'on utilise le plus souvent, admet la possibilit\u00e9 que les deux options soient choisies. </p> <p></p> <p>Table de v\u00e9rit\u00e9 de l'op\u00e9rateur de disjonction</p> a b a <code>or</code> b F F F F V V V F V V V V <p></p>"},{"location":"bases-de-programmation/type-booleens-instructions-conditionnelles/#operateur-de-negation-non","title":"Op\u00e9rateur de n\u00e9gation (NON)","text":"<p>L'op\u00e9rateur de n\u00e9gation est un op\u00e9rateur unaire (avec une seule op\u00e9rande) qui inverse la valeur du bool\u00e9en. Il retourne vrai seulement si l'op\u00e9rande et faux, et faux seulement si l'op\u00e9rande est vrai. On le note en Python par le mot cl\u00e9 <code>not</code>.</p> <p></p> <p>Table de v\u00e9rit\u00e9 de l'op\u00e9rateur de conjonction</p> a <code>not</code> a F V V F <p></p>"},{"location":"bases-de-programmation/type-booleens-instructions-conditionnelles/#la-priorite-des-informations","title":"La priorit\u00e9 des informations","text":"<p>Comme les op\u00e9rateurs arithm\u00e9tiques, les op\u00e9rateurs bool\u00e9ens n'ont pas tous la m\u00eame priorit\u00e9. Dans l'ordre : </p> <ol> <li>Op\u00e9rateur de n\u00e9gation (<code>not</code>)</li> <li>Op\u00e9rateur de conjonction (<code>and</code>)</li> <li>Op\u00e9rateur de disjonction (<code>or</code>)</li> </ol> <p>Comme pour l'arithm\u00e9tique, on peut ajouter des parenth\u00e8ses pour modifier l'ordre des op\u00e9rations.</p> <p>En math\u00e9matiques</p> <p>Il existe une notation math\u00e9matique pour exprimer la logique formelle. Voici l'\u00e9quivalent en termes de notation.</p> <ul> <li>conjonction : \\(\\wedge\\)</li> <li>disjonction : \\(\\vee\\)</li> <li>negation : \\(\\neg\\) ou \\(\\bar{a}\\)</li> </ul>"},{"location":"bases-de-programmation/type-booleens-instructions-conditionnelles/#operateurs-de-comparaison","title":"Op\u00e9rateurs de comparaison","text":"<p> Section 4.1</p> <p>On doit souvent comparer des valeurs entre elles dans un programme afin de permettre d'automatiser des traitements. On utilise les op\u00e9rateurs de comparaison (aussi appel\u00e9s relationnels), dont le comportement d\u00e9pend du type de donn\u00e9es. La comparaison de deux nombres ou deux cha\u00eenes de caract\u00e8res ne se fait pas de la m\u00eame fa\u00e7on. Voici les 6 op\u00e9rateurs de comparaison en Python.</p> <p></p> Op\u00e9rateur Symbole Entre nombres Entre cha\u00eenes Entre bool\u00e9ens \u00c9gal == Si les nombres sont pareils (attention aux float) Si le contenu des cha\u00eenes est pareil (sensible \u00e0 la casse) Si les deux valeurs sont les m\u00eames Diff\u00e9rent de != Si les nombres sont diff\u00e9rents (attention aux float) Si le contenu des cha\u00eenes est diff\u00e9rent (sensible \u00e0 la casse) Si les deux valeurs sont diff\u00e9rentes Plus petit que &lt; Un nombre est plus petit qu'un autre Compare l'ordre des codes ASCII des caract\u00e8res de la cha\u00eene <code>False</code> est plus petit que <code>True</code> Plus petit ou \u00e9gale que &lt;= Un nombre est plus petit ou \u00e9gal \u00e0 un autre Compare l'ordre des codes ASCII des caract\u00e8res de la cha\u00eene <code>False</code> est plus petit que <code>True</code> Plus grand que &gt; Un nombre est plus grand qu'un autre Compare l'ordre des codes ASCII des caract\u00e8res de la cha\u00eene <code>True</code> est plus grand que <code>False</code> Plus grand ou \u00e9gal que &gt;= Un nombre est plus grand ou \u00e9gal \u00e0 un autre Compare l'ordre des codes ASCII des caract\u00e8res de la cha\u00eene <code>True</code> est plus grand que <code>False</code> <p></p> <p>Comparer des types diff\u00e9rents</p> <p>Certaines donn\u00e9es peuvent \u00eatre compar\u00e9es m\u00eame si elles ne sont pas dans le m\u00eame type, d'autres non. La meilleure pratique consiste \u00e0 convertir d'abord l'une des deux donn\u00e9es afin de comparer des donn\u00e9es de m\u00eame type.</p>"},{"location":"bases-de-programmation/type-booleens-instructions-conditionnelles/#la-priorite-des-operations-globale-en-informatique","title":"La priorit\u00e9 des op\u00e9rations globale en informatique","text":"<p>On a vu quelques groupes d'op\u00e9rations qui ont elles aussi une priorit\u00e9 entre eux. Voici donc la priorit\u00e9 globale des op\u00e9rations en Python.</p> <ol> <li>Appel de fonction</li> <li>Parenth\u00e8ses <code>()</code> </li> <li>Exposant <code>**</code></li> <li>Multiplication et division <code>* / // %</code></li> <li>Addition et soustraction <code>+ -</code></li> <li>Comparaison <code>== != &lt; &lt;= &gt; &gt;=</code></li> <li>N\u00e9gation <code>not</code></li> <li>Conjonction <code>and</code></li> <li>Disjonction <code>or</code></li> <li>Affectation <code>=</code></li> </ol> <p>En cas de priorit\u00e9 \u00e9gale, les instructions s'ex\u00e9cutent de la gauche vers la droite.</p>"},{"location":"bases-de-programmation/type-booleens-instructions-conditionnelles/#traitement-conditionnel","title":"Traitement conditionnel","text":"<p> Section 4.2</p> <p>L'une des caract\u00e9ristiques les plus importantes des programmes est de r\u00e9agir de fa\u00e7on diff\u00e9renci\u00e9e aux diff\u00e9rentes entr\u00e9es. Comme pr\u00e9sent\u00e9 au cours pr\u00e9c\u00e9dent, l'une des caract\u00e9ristiques des ordinateurs est d'accepter des donn\u00e9es, donc il faut pouvoir les consid\u00e9rer dans les traitements effectu\u00e9s.</p> <p>L'id\u00e9e de la clause conditionnelle est d'effectuer une v\u00e9rification sur un bool\u00e9en et d'effectuer un traitement diff\u00e9rent selon la valeur.</p> <pre><code>graph LR\n  A[Code...] --&gt; B{Test logique};\n  B --&gt;|Faux| D[Code...];\n  B --&gt;|Vrai| C[Traitement conditionnel];\n  C --&gt; D;</code></pre>"},{"location":"bases-de-programmation/type-booleens-instructions-conditionnelles/#clause-de-base","title":"Clause de base","text":"<p>Dans le code python, cela prend la forme d'une condition <code>!#py if</code>.</p> <pre><code>Code...\n\nif test_logique :\n    # Traitement conditionnel\n\nCode...\n</code></pre> <p>L'indentation</p> <p>Remarquez l'indentation (retrait de la marge de gauche) suppl\u00e9mentaire sous le <code>!#py if</code> pour la section traitement conditionnel. C'est ce qui permet \u00e0 Python de savoir quelles instructions sont dans le bloc d'instructions conditionnelles (il peut y avoir plusieurs lignes) et quand celui-ci se termine.</p> <p>Il y a trois fa\u00e7ons de construire des tests logiques pour des expressions conditionnelles :</p> <ul> <li>Utiliser une variable bool\u00e9enne;</li> <li>Utiliser une expression de comparaison;</li> <li>Utiliser une fonction qui retourne un bool\u00e9en (couvert dans une prochaine section);</li> </ul>"},{"location":"bases-de-programmation/type-booleens-instructions-conditionnelles/#sinon","title":"Sinon...","text":"<p> Section 4.3</p> <p>Il arrive que l'on veuille forcer le programme entre deux branches d'ex\u00e9cution possibles. </p> <pre><code>graph LR\n  A[Code...] --&gt; B{Test logique};\n  B --&gt; |Vrai| C[Traitement conditionnel];\n  B --&gt; |Faux| E[Traitement alternatif];\n  E --&gt; D[Code...];\n  C --&gt; D;</code></pre> <p>Dans ce cas, on utilise la clause <code>else</code> pour signifier l'autre traitement qui est ex\u00e9cut\u00e9 lorsque la condition est fausse.</p> Nombre positif ou non<pre><code>print(\"Saisissez un nombre.\")\nnombre = int(input())\n\nif nombre &gt; 0:\n    print(\"Le nombre est positif.\")\nelse :\n    print(\"Le nombre n'est pas positif.\")\n\nprint(\"Fin du programme\")\n</code></pre>"},{"location":"bases-de-programmation/type-booleens-instructions-conditionnelles/#et-sinon-encore","title":"Et sinon encore...","text":"<p> Section 4.4</p> <p>Il arrive qu'on puisse avoir plusieurs sc\u00e9narios d'ex\u00e9cution possibles qui sont exclusifs entre eux.</p> <pre><code>graph LR\n  A[Code...] --&gt; B{Test logique};\n  B --&gt; C[Traitement conditionnel];\n  E --&gt; D[Code...];\n  B --&gt; E[Traitement alternatif 1];\n  B --&gt; F[Traitement alternatif 2] --&gt; D;\n  B --&gt; G[Traitement alternatif ...] --&gt; D;\n  C --&gt; D;</code></pre> <p>On utilise dans ce cas les clauses <code>elif</code> (contraction de else if) qui acceptent aussi une condition. Il peut y avoir plusieurs clauses <code>elif</code> qui s'encha\u00eene. La premi\u00e8re clause dont la condition est \u00e9valu\u00e9e \u00e0 vraie est ex\u00e9cut\u00e9e, puis le programme continu. La clause <code>if</code> est toujours la premi\u00e8re et la clause <code>else</code>, lorsqu'elle est n\u00e9cessaire, est toujours la derni\u00e8re.</p> Nombre positif, n\u00e9gatif ou nul<pre><code>print(\"Saisissez un nombre.\")\nnombre = int(input())\n\nif nombre &gt; 0:\n    print(\"Le nombre est positif.\")\nelif nombre &lt; 0 :\n    print(\"Le nombre est n\u00e9gatif.\")\nelse :\n    print(\"Vous avez saisi 0.\");\n\nprint(\"Fin du programme\")\n</code></pre>"},{"location":"bases-de-programmation/type-booleens-instructions-conditionnelles/#utilisation-des-operateurs-booleens","title":"Utilisation des op\u00e9rateurs bool\u00e9ens","text":"<p>Prenons un exemple un peu plus complexe afin d'utiliser les op\u00e9rateurs bool\u00e9ens dans les conditions et de combiner celles-ci.</p> <p>On \u00e9crit une intelligence artificielle toute simple qui sert \u00e0 caract\u00e9riser des animaux \u00e0 partir de quelques-unes de leurs caract\u00e9ristiques. Les animaux \u00e0 identifier sont : </p> <ul> <li>Le poisson,</li> <li>Le serpent,</li> <li>Le chat,</li> <li>Le poulet,</li> <li>La chauve-souris,</li> <li>La fourmi,</li> <li>Le papillon ou</li> <li>L'araign\u00e9e </li> </ul> <p>Il faut aussi indiquer si l'animal est impossible \u00e0 d\u00e9terminer. La base du programme est la suivante.</p> Programme de base - IA animaux<pre><code># Saisie des caract\u00e9ristiques\nprint(\"Combien de pattes poss\u00e8de votre animal ?\")\nnombre_patte = int(input())\n\nprint(\"Quel est son mode de transport : marche, nage ou vol ?\")\nmode_transport = input()\n\n# Afficher s'il s'agit d'un poisson, d'un serpent, d'un chat, d'un poulet,\n# d'une chauve-souris, d'une fourmi, d'un papillon,  d'une araign\u00e9e ou s'il est impossible de le d\u00e9terminer\n</code></pre>"},{"location":"bases-de-programmation/type-booleens-instructions-conditionnelles/#exercices","title":"Exercices","text":"<p> Page 70 et suivantes</p> <p>Recommand\u00e9s : 4.1, 4.2, 4.3, 4.8, 4.9, 4.11 Suppl\u00e9mentaires : 4.6, 4.10</p>"},{"location":"bases-de-programmation/type-booleens-instructions-conditionnelles/#concepts-cles-de-la-section","title":"Concepts cl\u00e9s de la section","text":"<code>bool\u00e9en et op\u00e9rateurs logiques</code> les bool\u00e9ens repr\u00e9sentent une information qui peut prendre deux \u00e9tats vrai ou faux. On peut combiner plusieurs expressions bool\u00e9ennes par les op\u00e9rateurs et et ou. On peut aussi inverser un \u00e9tat avec l'op\u00e9rateur de n\u00e9gation. <code>comparateur</code> v\u00e9rifie une relation entre deux expressions et retourne une valeur bool\u00e9enne selon si la relation est v\u00e9rifi\u00e9e au non. <code>instruction conditionnelle</code> permet d'ex\u00e9cuter une partie du code seulement lorsqu'une condition est v\u00e9rifi\u00e9e. On peut pr\u00e9ciser des traitements alternatifs si la situation le requiert."},{"location":"bases-de-programmation/types-numeriques-variables-constantes/","title":"Types num\u00e9riques, variables et constantes","text":""},{"location":"bases-de-programmation/types-numeriques-variables-constantes/#les-types-numeriques-les-variables-et-les-constantes","title":"Les types num\u00e9riques, les variables et les constantes","text":"<p> Contenus de la section</p> <p>2-1 Variables, constantes et types</p> <p>a. Entiers et repr\u00e9sentation \u00e0 virgule flottante</p> <p>2-2 Traitements de donn\u00e9es</p> <p>a. Manipulation de nombres</p> <p> Temps requis</p> <p>25 minutes</p>"},{"location":"bases-de-programmation/types-numeriques-variables-constantes/#les-variables","title":"Les variables","text":"<p> Section 1.1</p> <p>L'objet de la programmation est la manipulation des donn\u00e9es. Pour les manipuler, il faut entre en mesure de les stocker et de leur acc\u00e9der dans un programme. Pour ce faire, on utilise la construction de <code>variable</code> du langage Python. Pour d\u00e9clarer une variable, on doit lui donner un identificateur puis lui affecter une valeur.</p> D\u00e9clarer de variable<pre><code># Syntaxe pour d\u00e9clarer une variable\nidentificateur = &lt;valeur&gt;\n\n# Exemple de d\u00e9claration d'une variable\naire_triangle = 12\n</code></pre> <p>Commentaire</p> <p>Vous avez sans doute remarqu\u00e9 la ligne pr\u00e9c\u00e9d\u00e9e du symbole # dans le code pr\u00e9c\u00e9dent. Cela s'appelle un <code>commentaire</code>. Un commentaire permet d'\u00e9crire un texte qui est ignor\u00e9 par Python. Les commentaires aident la compr\u00e9hension du code en expliquant son intention. On verra plus en d\u00e9tail plus tard comment r\u00e9diger des commentaires utiles et pertinents.</p> <p>Pour acc\u00e9der au contenu d'une variable, on indique simplement son identificateur dans une expression. Pour modifier le contenu d'une variable apr\u00e8s sa d\u00e9claration, on utilise l'op\u00e9rateur d'affectation (nom fancy pour le symbole =). La syntaxe est la m\u00eame que pour la d\u00e9claration.</p>"},{"location":"bases-de-programmation/types-numeriques-variables-constantes/#les-identificateurs","title":"Les identificateurs","text":"<p>Un ensemble de r\u00e8gles encadre l'utilisation des identificateurs en Python, soit les r\u00e8gles de syntaxe (qui vont emp\u00eacher votre programme de fonctionner) et les conventions de code (qui vont faire faire des gros yeux m\u00e9chants \u00e0 vos profs si vous ne les suivez pas).</p> <p>R\u00e8gles de syntaxe</p> <p>Un identificateur :</p> <ul> <li>est compos\u00e9 seulement de lettres, de chiffres et du symbole d'underscore <code>_</code>;</li> <li>commence par une lettre;</li> <li>n'est pas un mot-cl\u00e9 du langage. </li> </ul> <p>Convention du langage</p> <ul> <li>Les identificateurs ont des noms significatifs (sauf pour les formules math\u00e9matiques connues, mais elles devraient \u00eatre accompagn\u00e9es d'un commentaire)</li> <li>Pour les variables, ils n'utilisent pas de majuscules. S'il y a plusieurs mots, on les s\u00e9pare par un underscore (ce qui est appel\u00e9 snake_case)</li> </ul> <p>Sensibilit\u00e9 \u00e0 la casse</p> <p>Python est sensible \u00e0 la casse des lettres, donc \"Variable\" et \"variable\" sont deux identificateurs diff\u00e9rents.</p>"},{"location":"bases-de-programmation/types-numeriques-variables-constantes/#les-types-de-donnees-numeriques","title":"Les types de donn\u00e9es num\u00e9riques","text":"<p> Section 1.3</p> <p>Les donn\u00e9es num\u00e9riques dans un syst\u00e8me informatique doivent \u00eatre repr\u00e9sent\u00e9es, ultimement, en langage binaire. Le binaire, est simplement l'utilisation de la base 2 plut\u00f4t que la base 10 pour repr\u00e9senter les positions dans un nombre. Par exemple, en base 10 (syst\u00e8me d\u00e9cimal), le nombre 423 signifie \\(2 \\times 10^2 + 2 \\times 10^1 + 3 \\times 10^0\\). On remarque l'utilisation de la base 10 pour repr\u00e9senter les positions. En binaire, il faut parvenir \u00e0 \u00e9crire ce nombre sous la forme \\(x_n \\times 2^n + x_{n-1} \\times 2^{n-1} + ... + x_1 \\times 2^1 + x_0 \\times 2^0\\). </p> <p>Tout comme le syst\u00e8me d\u00e9cimal permet les valeurs de 0 \u00e0 9, le syst\u00e8me binaire permet les valeurs 0 et 1. Dans l'exemple pr\u00e9c\u00e9dent, 423 en binaire est 1 1010 0111 (on groupe les bits en paquet de quatre pour faciliter la lecture).</p> <p>En programmant, nous pouvons (fort heureusement) \u00e9crire nos nombres dans le syst\u00e8me d\u00e9cimal et Python s'occupe de la conversion en binaire pour interagir avec la machine. De plus, nos repr\u00e9sentations pour les nombres entiers seront toujours exactes.</p> <p>Python et les grands nombres</p> <p>Contrairement \u00e0 d'autres langages qui ont une limite sur la taille des nombres entiers qu'ils peuvent traiter, Python supporte les nombres entiers arbitrairement grands.</p>"},{"location":"bases-de-programmation/types-numeriques-variables-constantes/#le-cas-des-nombres-a-virgule","title":"Le cas des nombres \u00e0 virgule","text":"<p> Section 1.5</p> <p>La repr\u00e9sentation des nombres \u00e0 virgule pose probl\u00e8me, entre autres, car les nombres avec un nombre infini de d\u00e9cimales ne sont plus les m\u00eames ! Prenons l'exemple de 0.1, soit en base d\u00e9cimale \\(1 \\times 10^{-1}\\). Il faut maintenant l'\u00e9crire sous la forme \\(x_1 \\times 2^{-1} + x_2 \\times 2^{-2} + ... + x_n \\times 2^{-n}\\). On obtient le nombre sous la forme 0.0001 1001 1001 1001 ... \u00c9videmment, l'ordinateur arr\u00eate sa repr\u00e9sentation quelque part, ce qui m\u00e8ne \u00e0 un arrondi et une perte de pr\u00e9cision. Donc les nombres \u00e0 virgule ne peuvent pas \u00eatre repr\u00e9sent\u00e9s de fa\u00e7on exacte, sous forme num\u00e9rique dans un programme. </p> <p>On trouve des cons\u00e9quences de cette erreur d'arrondie dans le calcul suivant par exemple : 0.1 + 0.1 + 0.1, ce qui en base d\u00e9cimale vaut 0.3, mais affichera 0.30000000000000004 dans le langage Python. Nous verrons comment g\u00e9rer ces erreurs arithm\u00e9tiques plus loin.</p> <p>La virgule ou le point</p> <p>En fran\u00e7ais, on utilise la virgule pour s\u00e9parer la partie d\u00e9cimale de la partie enti\u00e8re dans l'\u00e9criture d'un nombre. Cependant, les langages de programmation sont (presque tous) cr\u00e9\u00e9s en anglais, o\u00f9 le symbole du point s\u00e9pare la partie enti\u00e8re de la partie d\u00e9cimale. C'est cette convention (l'anglaise) qu'il faut utiliser en \u00e9crivant du code.  </p>"},{"location":"bases-de-programmation/types-numeriques-variables-constantes/#operations-mathematiques","title":"Op\u00e9rations math\u00e9matiques","text":"<p> Section 1.4</p> <p>Le langage Python d\u00e9finit 7 op\u00e9rations arithm\u00e9tiques. On peut aussi utiliser les parenth\u00e8ses <code>(</code>, <code>)</code> pour assurer la priorit\u00e9 des op\u00e9rations. Automatiquement, Python applique la priorit\u00e9 des op\u00e9rations dans l'ordre usuel, puis de gauche \u00e0 droite.</p> Op\u00e9ration Priorit\u00e9 Op\u00e9rateur Exemple d'utilisation Addition 3 + <code>1 + 1 # R\u00e9sultat : 2</code> Soustraction 3 - <code>2 - 1 # R\u00e9sultat : 0</code> Multiplication 2 * <code>-1 * 2 # R\u00e9sultat : -2</code> Division 2 / <code>3 / 2 # R\u00e9sultat : 1.5</code> Division enti\u00e8re 2 // <code>11 // 3 # R\u00e9sultat : 3</code> Modulo (reste de la division enti\u00e8re) 2 % <code>11 % 3 # R\u00e9sultat : 2</code> Exponentiation 1 ** <code>2 ** 3 # R\u00e9sultat : 8</code> <p>Entiers et d\u00e9cimaux</p> <p>La division enti\u00e8re et le modulo, bien que non d\u00e9fini dans le formalisme math\u00e9matique, se comportent comme le prolongement des op\u00e9rations sur les entiers. Toutefois, n'allez pas faire des modulos sur autre chose que des nombres entiers en math\u00e9matiques !  </p> Calculer l'aire d'un triangle<pre><code>base = 1.2\nhauteur = 2.7\naire_triangle = (base * hauteur) / 2.0   # Contient 1.62\n</code></pre>"},{"location":"bases-de-programmation/types-numeriques-variables-constantes/#melanger-les-entiers-et-les-nombres-a-virgule","title":"M\u00e9langer les entiers et les nombres \u00e0 virgule","text":"<p>Lorsqu'une expression utilise \u00e0 la fois des nombres entiers et \u00e0 virgule, Python convertit automatiquement en nombre \u00e0 virgule tous les termes de l'expression arithm\u00e9tique. Attention, cela ne change pas les valeurs dans les variables utilis\u00e9es, seulement la fa\u00e7on dont le calcul est effectu\u00e9.</p>"},{"location":"bases-de-programmation/types-numeriques-variables-constantes/#les-constantes","title":"Les constantes","text":"<p>Si l'on souhaite repr\u00e9senter une constante (comme PI par exemple), on utilise les lettres majuscules pour la d\u00e9finir. Cela ne change rien \u00e0 l'ex\u00e9cution du programme, mais permet de signaler qu'il ne faut pas modifier la valeur de cette variable durant l'ex\u00e9cution.</p> Calculer l'aire d'un disque<pre><code>PI = 3.141592\nrayon = 2\naire_disque = PI * rayon**2     # Contient 12.566368\n</code></pre>"},{"location":"bases-de-programmation/types-numeriques-variables-constantes/#afficher-un-resultat","title":"Afficher un r\u00e9sultat","text":"<p>On utilise la fonction <code>print</code> pour afficher le r\u00e9sultat d'une variable. Nous verrons dans la section sur les cha\u00eenes de caract\u00e8res et sur les entr\u00e9es et sorties plus de d\u00e9tails sur cette fonction.</p> Afficher l'aire d'un disque<pre><code>PI = 3.141592\nrayon = 2\naire_disque = PI * rayon**2     # Contient 12.566368\n\nprint(aire_disque)\n</code></pre>"},{"location":"bases-de-programmation/types-numeriques-variables-constantes/#exercices","title":"Exercices","text":"<p> Page 27 et suivantes</p> <p>Recommand\u00e9s : 1.2, 1.3 (la fonction <code>print</code> affiche le r\u00e9sultat \u00e0 l'utilisateur, on verra ses d\u00e9tails dans une prochaine section), 1.5, 1.9, 1.12, 1.13, 1.15, 1.19, 1.23 Suppl\u00e9mentaires : 1.4, 1.20</p>"},{"location":"bases-de-programmation/types-numeriques-variables-constantes/#concepts-cles-de-la-section","title":"Concepts cl\u00e9s de la section","text":"<code>D\u00e9claration</code> op\u00e9ration dans lequelle on indique dans le langage de programmation l'existence d'une certaine structure (variable, fonction...) <code>Erreur d'arrondi</code> Diff\u00e9rence entre le syst\u00e8me d\u00e9cimal et binaire. Les nombres \u00e0 virgule repr\u00e9sent\u00e9es en format d\u00e9cimal dans le langage peuvent ne pas toujours prendre la valeur indiqu\u00e9e.  <code>Variable</code> Construction du langage qui permet de stocker des informations"},{"location":"introduction-outils/algorithmes/","title":"Les algorithmes","text":""},{"location":"introduction-outils/algorithmes/#les-algorithmes","title":"Les algorithmes","text":"<p> Objectifs de la section</p> <p>1-1 Notion de traitement automatique et d\u2019algorithme 1-2 Identification des donn\u00e9es disponibles et du r\u00e9sultat attendu 1-3 Techniques de d\u00e9composition d\u2019un probl\u00e8me complexe en plusieurs sous-probl\u00e8mes plus simples 1-6 M\u00e9thodes et s\u00e9quence de d\u00e9veloppement d\u2019un programme</p> <p> Temps requis</p> <p>30 minutes</p> <p>Un algorithme est une s\u00e9quence d'op\u00e9rations pour effectuer un calcul ou produire un r\u00e9sultat. On peut exprimer un algorithme par le langage naturel, des langages visuels ou par langage de programmation. </p> <p>On peut voir l'algorithme comme la structure d'un programme informatique. Vous avez vu plusieurs petits algorithmes depuis le d\u00e9but de la session, et m\u00eame, dans d'autres sph\u00e8res de votre vie. Un exemple d'algorithme dans la vie courante est une recette de cuisine : il s'agit d'une proc\u00e9dure \u00e0 appliquer de fa\u00e7on m\u00e9thodique.</p> <p>Prenons l'exemple du probl\u00e8me suivant : on souhaite \u00e0 partir de 3 points d\u00e9terminer les angles int\u00e9rieurs d'un triangle. Sur l'image ci-dessous, on connait l'information en bleu et l'on cherche l'information en vert.</p> Exemple du triangle pour lequel on cherche les angles <p>Si vous deviez r\u00e9soudre ce probl\u00e8me sur une feuille de papier, vous pourriez par exemple calculer les vecteurs \\(\\overrightarrow{AB}\\) et \\(\\overrightarrow{AC}\\) puis utiliser les propri\u00e9t\u00e9s du produit scalaire pour calculer l'angle \\(&lt;\\overrightarrow{AB}, \\overrightarrow{AC}&gt; = ||\\overrightarrow{AB}|| \\cdot ||\\overrightarrow{AC}|| \\cdot \\cos(\\alpha)\\). On peut ensuite r\u00e9p\u00e9ter cette m\u00e9thode pour trouver \\(\\beta\\) et \\(\\gamma\\).</p> La d\u00e9marche math\u00e9matique <p>Voici un exemple de d\u00e9marche math\u00e9matique telle qu'elle serait r\u00e9alis\u00e9e \u00e0 la mitaine pour calculer l'angle \\(\\alpha\\).</p> <p>Calcul des vecteurs</p> \\[ \\begin{align} \\overrightarrow{AB} &amp;= (1, 1) - (5, 5) = (-4, -4)\\\\ \\overrightarrow{AC} &amp;= (6, 1) - (5, 5) = (1, -4) \\end{align} \\] <p>Calcul des normes</p> \\[ \\begin{align} ||\\overrightarrow{AB}|| &amp;= \\sqrt{(-4)^2 + (-4)^2} = \\sqrt{32} \\approx 5.66\\\\ ||\\overrightarrow{AC}|| &amp;= \\sqrt{1^2 + (-4)^2} = \\sqrt{17} \\approx 4.12 \\end{align} \\] <p>Calcul de l'angle</p> \\[ \\begin{align} &lt;\\overrightarrow{AB}, \\overrightarrow{AC}&gt; &amp;= ||\\overrightarrow{AB}|| \\cdot ||\\overrightarrow{AC}|| \\cdot \\cos(\\alpha)\\\\ \\Rightarrow -4 \\cdot 1 + -4 \\cdot -4 &amp;= 5.66 \\cdot 4.14 \\cdot \\cos(\\alpha)\\\\ \\Rightarrow 12 &amp;= 23.43 \\cdot \\cos(\\alpha)\\\\ \\Rightarrow \\arccos(0.51) &amp;= \\alpha\\\\ \\Rightarrow \\alpha &amp;= 59.34 \\text{ degres } \\approx 59.04 \\text { degres } \\end{align} \\] <p>Une autre personne, toujours pour  calculer les longueurs \\(a\\), \\(b\\) et \\(c\\) (qui sont respectivement les normes des vecteurs \\(\\overrightarrow{CB}\\), \\(\\overrightarrow{AC}\\) et \\(\\overrightarrow{AB}\\)), ourrait plut\u00f4t choisir d'utiliser la loi des cosinus (\\(a=\\sqrt{b^2+c^2-2bc\\cdot\\cos(\\alpha)}\\)) pour trouver les angles. </p> La d\u00e9marche math\u00e9matique <p>Voici un exemple de d\u00e9marche math\u00e9matique telle qu'elle serait r\u00e9alis\u00e9e \u00e0 la mitaine pour calculer l'angle \\(\\alpha\\).</p> <p>Calcul des vecteurs</p> \\[ \\begin{align} \\overrightarrow{AB} &amp;= (1, 1) - (5, 5) = (-4, -4)\\\\ \\overrightarrow{AC} &amp;= (6, 1) - (5, 5) = (1, -4)\\\\ \\overrightarrow{BC} &amp;= (6, 1) - (1, 1) = (5, 0)\\\\ \\end{align} \\] <p>Calcul des normes</p> \\[ \\begin{align} c = ||\\overrightarrow{AB}|| &amp;= \\sqrt{(-4)^2 + (-4)^2} = \\sqrt{32} \\approx 5.66\\\\ b = ||\\overrightarrow{AC}|| &amp;= \\sqrt{1^2 + (-4)^2} = \\sqrt{17} \\approx 4.12\\\\ a = ||\\overrightarrow{BC}|| &amp;= \\sqrt{5^2 + 0^2} = \\sqrt{25} = 5 \\end{align} \\] <p>Calcul de l'angle</p> \\[ \\begin{align} a=\\sqrt{b^2+c^2-2bc\\cdot\\cos(\\alpha)} \\Rightarrow 5 &amp;= \\sqrt{\\sqrt{17}^2 + \\sqrt{32}^2 - 2 \\cdot 5.66 \\cdot 4.12 \\cdot \\cos(\\alpha)}\\\\ \\Rightarrow 25 &amp;= 17 + 32 - 46.64 \\cdot \\cos(\\alpha)\\\\ \\Rightarrow \\cos(\\alpha) &amp;= 0.51\\\\ \\Rightarrow \\alpha &amp;= \\arccos(0.51)\\\\ \\Rightarrow \\alpha &amp;= 59.34 \\text{ degres } \\approx 59.04 \\text { degres } \\end{align} \\] <p>Ce sont deux algorithmes diff\u00e9rents qui permettent d'obtenir le m\u00eame r\u00e9sultat. Exprimons ces algorithmes avec le langage clair.</p> Algorithme 1 - Produit scalaireAlgorithme 2 - Loi des cosinus <p>Entr\u00e9e : les 2 coordonn\u00e9es des 3 points (6 nombres \u00e0 virgules) Sortie : affichage des trois angles</p> <ol> <li>Calculer le vecteur \\(\\overrightarrow{AB}\\) et \\(\\overrightarrow{CB}\\);</li> <li>Calculer la norme de \\(\\overrightarrow{AB}\\) et de \\(\\overrightarrow{CB}\\);</li> <li>Calculer l'angle \\(\\beta\\) avec la formule du produit scalaire;</li> <li>Calculer le vecteur \\(\\overrightarrow{BA}\\) et \\(\\overrightarrow{CA}\\);</li> <li>Calculer la norme de \\(\\overrightarrow{BA}\\) et de \\(\\overrightarrow{CA}\\);</li> <li>Calculer l'angle \\(\\alpha\\) avec la formule du produit scalaire;</li> <li>Calculer l'angle \\(\\gamma\\) avec la formule \\(\\gamma = 180 - \\alpha - \\beta\\);</li> <li>Afficher les 3 angles.</li> </ol> <p>Entr\u00e9e : les 2 coordonn\u00e9es des 3 points (6 nombres \u00e0 virgules) Sortie : affichage des trois angles</p> <ol> <li>Calculer les vecteurs \\(\\overrightarrow{CB}\\), \\(\\overrightarrow{AC}\\) et \\(\\overrightarrow{AB}\\);</li> <li>Calculer la norme de chaque vecteur pour obtenir les valeurs de \\(a, b \\text{ et } c\\);</li> <li>Utiliser la loi des cosinus pour calculer \\(\\alpha\\) et \\(\\beta\\);</li> <li>Calculer l'angle \\(\\gamma\\) avec la formule \\(\\gamma = 180 - \\alpha - \\beta\\);</li> <li>Afficher les 3 angles.</li> </ol> <p>On peut coder ces algorithmes avec Python maintenant, MAIS on peut aussi continuer de r\u00e9fl\u00e9chir avant de continuer et appliquer la r\u00e8gle d'or des programmeurs et programmeuses</p> <p>R\u00e8gle d'or de la programmation</p> <p>Un bon programmeur, une bonne programmeuse agit de la fa\u00e7on la plus paresseuse possible !</p> <p>Cette maxime de sagesse populaire (qu'il faut prendre avec un grain de sel) r\u00e9sume bien des r\u00e8gles importantes dans l'\u00e9laboration d'un bon code, soit qu'on \u00e9vite de r\u00e9p\u00e9ter du code. En effet, r\u00e9p\u00e9ter le m\u00eame code, en plus de nous prendre plus de temps \u00e0 cr\u00e9er, peut amener les erreurs \u00e0 se r\u00e9p\u00e9ter.</p>"},{"location":"introduction-outils/algorithmes/#division-de-lalgorithme-avec-le-produit-scalaire","title":"Division de l'algorithme avec le produit scalaire","text":"<p>Concentrons-nous pour l'instant dans l'algorithme avec le produit scalaire et cherchons les op\u00e9rations r\u00e9p\u00e9t\u00e9es : </p> <ol> <li>Calculer deux vecteurs \u00e0 partir de quatre points;</li> <li>Calculer la norme d'un vecteur;</li> <li>Appliquer la formule du produit scalaire.</li> </ol> <p>On va donc cr\u00e9er un algorithme sp\u00e9cifiquement pour trouver un angle \u00e0 partir de quatre points que l'on va pouvoir appeler 2 fois. Dans le livre du cours, c'est ce qui est appel\u00e9 sous-programme, mais nous utiliserons plut\u00f4t le terme fonction. \u00c0 la page sur les fonctions, vous avez toutes les informations sur la syntaxe des fonctions.</p> <p>Voici donc les algorithmes de ce programme.</p> Algorithme - calculer normeAlgorithme - calculer produit scalaireAlgorithme - calculer angleAlgorithme - Afficher les angles du triangle <p>Entr\u00e9e : les coordonn\u00e9es des extr\u00e9mit\u00e9s des vecteurs. Sortie : retourne la norme du vecteur sous forme d'un nombre \u00e0 virugle.</p> <ol> <li>Calculer la coordonn\u00e9e en X du vecteur;</li> <li>Calculer la coordonn\u00e9e en Y du vecteur;</li> <li>Appliquer la formule de la norme;</li> <li>Retourner le r\u00e9sultat.</li> </ol> <p>Entr\u00e9e : les coordonn\u00e9es des extr\u00e9mit\u00e9s des deux vecteurs pour lesquels calculer le produit scalaire.  Sortie : retourne le produit scalaire des vecteurs sous forme d'un nombre \u00e0 virugle.</p> <ol> <li>Calculer le produit scalaire;</li> <li>Retourner le produit scalaire.</li> </ol> <p>Entr\u00e9e : les coordonn\u00e9es des trois points qui cr\u00e9e l'angle. L'angle calcul\u00e9 est celui du premier point. Sortie : l'angle en degr\u00e9e entre les deux vecteurs.</p> <ol> <li>Calculer la norme des deux vecteurs;</li> <li>Calculer le produit scalaire des deux vecteurs;</li> <li>Calculer l'angle avec la relation du produit scalaire;</li> <li>Retourner le r\u00e9sultat.</li> </ol> <p>Entr\u00e9e : les coordonn\u00e9es des trois points qui forment le triangle. Sortie : affichage des trois angles.</p> <ol> <li>Calculer l'angle \\(\\alpha\\);</li> <li>Calculer l'angle \\(\\beta\\);</li> <li>Calculer l'angle \\(\\gamma\\) avec la formule \\(\\gamma = 180 - \\alpha - \\beta\\);</li> <li>Afficher les 3 angles.</li> </ol> Programme avec l'algorithme du produit scalaire<pre><code>from numpy import sqrt, arccos, rad2deg\n\n\ndef calculer_norme(x1, y1, x2, y2):\n    norme = sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)\n    return norme\n\n\ndef calculer_produit_scalaire(xu1, yu1, xu2, yu2, xv1, yv1, xv2, yv2):\n    xu = xu2 - xu1\n    yu = yu2 - yu1\n    xv = xv2 - xv1\n    yv = yv2 - yv1\n\n    produit_scalaire = xu * xv + yu * yv\n    return produit_scalaire\n\n\ndef calculer_angle(ax, ay, bx, by, cx, cy):\n    norme_ab = calculer_norme(ax, ay, bx, by)\n    norme_ac = calculer_norme(ax, ay, cx, cy)\n    produit_scalaire = calculer_produit_scalaire(ax, ay, bx, by, ax, ay, cx, cy)\n\n    # Calcul de l'angle avec la relation entre le produit scalaire et les normes\n    cos_angle = produit_scalaire / (norme_ab * norme_ac)\n    angle = rad2deg(arccos(cos_angle))\n\n    return angle\n\n\ndef afficher_angles_triangle(ax, ay, bx, by, cx, cy):\n    angle_alpha = calculer_angle(ax, ay, bx, by, cx, cy)\n    angle_beta = calculer_angle(bx, by, ax, ay, cx, cy)\n    angle_gamma = 180 - angle_alpha - angle_beta\n\n    print(f\"Les angles sont alpha={angle_alpha:.2f}, beta={angle_beta:.2f} et gamma={angle_gamma:.2f}.\")\n\n\nif __name__ == \"__main__\":\n    afficher_angles_triangle(1, 1, 5, 5, 6, 1)\n</code></pre> <p> T\u00e9l\u00e9charger le code complet avec la documentation</p>"},{"location":"introduction-outils/algorithmes/#division-de-lalgorithme-avec-la-loi-des-cosinus","title":"Division de l'algorithme avec la loi des cosinus","text":"<p>Reportons-nous maintenant \u00e0 l'algorithme avec la loi des cosinus et cherchons les op\u00e9rations r\u00e9p\u00e9t\u00e9es : </p> <ol> <li>Calculer la norme de chaque vecteur \u00e0 partir de ces coordonn\u00e9es;</li> <li>Appliquer la formule de la loi des cosinus.</li> </ol> <p>Nous allons pouvoir r\u00e9utiliser la fonction <code>calculer_norme</code> de la pr\u00e9c\u00e9dente d\u00e9monstration, car elle r\u00e9pond toujours \u00e0 nos besoins.</p> <p>Voici donc les algorithmes de ce programme.</p> Algorithme - calculer normeAlgorithme - calculer angleAlgorithme - Afficher les angles du triangle <p>Entr\u00e9e : les coordonn\u00e9es des extr\u00e9mit\u00e9s des vecteurs. Sortie : retourne la norme du vecteur sous forme d'un nombre \u00e0 virugle.</p> <ol> <li>Calculer la coordonn\u00e9e en X du vecteur;</li> <li>Calculer la coordonn\u00e9e en Y du vecteur;</li> <li>Appliquer la formule de la norme;</li> <li>Retourner le r\u00e9sultat.</li> </ol> <p>Entr\u00e9e : les coordonn\u00e9es des trois c\u00f4t\u00e9 du triangle. L'angle calcul\u00e9 est celui oppos\u00e9 au premier point. Sortie : l'angle oppos\u00e9 au premier c\u00f4t\u00e9 en degr\u00e9es.</p> <ol> <li>Appliquer la formule de la lois des cosinus pour calculer l'angle;</li> <li>Retourner le r\u00e9sultat.</li> </ol> <p>Entr\u00e9e : les coordonn\u00e9es des trois points qui forment le triangle. Sortie : affichage des trois angles.</p> <ol> <li>Calculer l'angle \\(\\alpha\\);</li> <li>Calculer l'angle \\(\\beta\\);</li> <li>Calculer l'angle \\(\\gamma\\) avec la formule \\(\\gamma = 180 - \\alpha - \\beta\\);</li> <li>Afficher les 3 angles.</li> </ol> Programme avec l'algorithme de la loi des cosinus<pre><code>from numpy import sqrt, arccos, rad2deg\n\n\ndef calculer_norme(x1, y1, x2, y2):\n    norme = sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)\n    return norme\n\n\ndef calculer_angle(a, b, c):\n    cosinus_angle = (a**2 - b**2 - c**2) / (-2*b*c)\n    angle = rad2deg(arccos(cosinus_angle))\n    return angle\n\n\ndef afficher_angles_triangle(ax, ay, bx, by, cx, cy):\n    # Longueur des c\u00f4t\u00e9s\n    cote_a = calculer_norme(bx, by, cx, cy)\n    cote_b = calculer_norme(ax, ay, cx, cy)\n    cote_c = calculer_norme(ax, ay, bx, by)\n\n    angle_alpha = calculer_angle(cote_a, cote_b, cote_c)\n    angle_beta = calculer_angle(cote_b, cote_c, cote_a)\n    angle_gamma = 180 - angle_alpha - angle_beta\n\n    print(f\"Les angles sont alpha={angle_alpha:.2f}, beta={angle_beta:.2f} et gamma={angle_gamma:.2f}.\")\n\n\nif __name__ == \"__main__\":\n    afficher_angles_triangle(5, 5, 1, 1, 6, 1)\n</code></pre> <p> T\u00e9l\u00e9charger le code complet avec la documentation</p>"},{"location":"introduction-outils/algorithmes/#gabarits-de-travail","title":"Gabarits de travail","text":"<p>Les gabarits suivants sont utilis\u00e9s pour aider \u00e0 structurer les algorithmes.</p> <p> Gabarit de planification  Gabarit de planification (avec consigne)  Exemple du gabarit de planification avec le probl\u00e8me des trois angles</p>"},{"location":"introduction-outils/conventions-langage/","title":"Conventions du langage python","text":""},{"location":"introduction-outils/conventions-langage/#les-conventions-du-langage-python","title":"Les conventions du langage Python","text":"<p>Cette page pr\u00e9sente les principales conventions de Python sur une seule page.</p>"},{"location":"introduction-outils/conventions-langage/#identificateur","title":"Identificateur","text":"<p>Un identificateur est  - est compos\u00e9 seulement de lettres, de chiffres et du symbole d'underscore <code>_</code>; - commence par une lettre; - n'est pas un mot-cl\u00e9 du langage.  - a un nom significatif (sauf pour les formules math\u00e9matiques connues, mais elles devraient \u00eatre accompagn\u00e9es d'un commentaire)</p> <p>De plus, certaines autres conventions s'appliquent selon l'usage de l'identificateur.</p> <ul> <li>Pour les variables, ils n'utilisent pas de majuscules. S'il y a plusieurs mots, on les s\u00e9pare par un underscore (ce qui est appel\u00e9 snake_case)</li> </ul>"},{"location":"introduction-outils/conventions-langage/#mots-cles-reserves-dans-le-langage-python","title":"Mots cl\u00e9s r\u00e9serv\u00e9s dans le langage Python","text":"<p>``` False      await      else       import     pass None       break      except     in         raise True       class      finally    is         return and        continue   for        lambda     try as         def        from       nonlocal   while assert     del        global     not        with async      elif       if         or         yield</p>"},{"location":"introduction-outils/installation/","title":"Installation","text":""},{"location":"introduction-outils/installation/#installer-python-et-lenvironnement-thonny","title":"Installer Python et l'environnement Thonny","text":"<p> Objectifs de la section</p> <p>Reconna\u00eetre les principales couches logicielles Expliquer l'utilisation et de l'interpr\u00e9tation des langages de programmation Installer les outils pour d\u00e9velopper dans le langage Python</p> <p> Temps requis</p> <p>20 minutes</p>"},{"location":"introduction-outils/installation/#les-langages-de-programmation","title":"Les langages de programmation","text":"<p>Bien que les machines fonctionnent \u00e0 l'aide de signaux \u00e9lectriques repr\u00e9sent\u00e9s par les structures binaires (0 pour l'absence de courant \u00e9lectrique et 1 pour un courant \u00e9lectrique), il est rarissime qu'il faille interagir \u00e0 ce niveau pour r\u00e9aliser une t\u00e2che. Bien souvent, on utilise un langage de programmation qui permet d'exprimer des concepts \u00e0 l'aide d'un langage lisible et interpr\u00e9table par les \u00eatres humains. Les \u00ab\u00a0textes\u00a0\u00bb \u00e9crits avec ce langage sont appel\u00e9s code source et le r\u00e9sultat de leur transformation en code utilisable par la machine est appel\u00e9 programme ou logiciel. </p> Exemple de programme simple avec Python<pre><code>def main():\n    try:\n        nombre = int(input(\"Saisissez un nombre entier, puis appuyez sur \\\"Entr\u00e9e\\\": \"))\n\n        if nombre &gt; 0:\n            print(\"Le nombre entr\u00e9 est positif.\")\n        elif nombre &lt; 0:\n            print(\"Le nombre entr\u00e9 est n\u00e9gatif.\")\n        else:\n            print(\"Le nombre entr\u00e9 est 0.\")\n\n    except ValueError:\n        print(\"Vous n'avez pas entr\u00e9 un nombre entier.\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>On trouve plusieurs dizaines de langages de programmation standard, certains plus g\u00e9n\u00e9raux et d'autres sp\u00e9cialis\u00e9s pour remplir une fonction ou manipuler un type d'information particulier. Tous les langages ont en commun qu'ils d\u00e9finissent une syntaxe (r\u00e8gles d'\u00e9criture des \u00ab\u00a0phrases\u00a0\u00bb la langue), une s\u00e9mantique (sens donn\u00e9 aux termes et aux structures) et un lexique (\u00ab\u00a0mots\u00a0\u00bb qui existent dans la langue). Le choix d'un langage plut\u00f4t qu'un autre repose souvent sur le lexique natif du langage ou des outils d\u00e9velopp\u00e9s avec le langage qui vient \u00e9tendre le lexique natif du langage.  Les langages offrent, pour la plupart, des fa\u00e7ons de lire des donn\u00e9es, de transmettre des donn\u00e9es, de traiter des donn\u00e9es et de stocker des donn\u00e9es. Ces quatre fonctionnalit\u00e9s correspondent aux quatre caract\u00e9ristiques des ordinateurs.</p> <p>L'une des plus grandes difficult\u00e9s dans l'apprentissage d'un langage de programmation est l'apprentissage de la s\u00e9mantique qui repose elle-m\u00eame sur un concept cl\u00e9 l'abstraction.</p> <p>Abstraction</p> <p>Une abstraction est une repr\u00e9sentation d'un concept tangible ou non avec une construction logicielle. Par exemple, un fichier est une abstraction d'une feuille de papier. Le fichier ne partage aucune caract\u00e9ristique commune avec la feuille de papier autre que les deux servent \u00e0 rassembler des informations \u00e0 un m\u00eame endroit. Pourtant, le fichier exerce exactement la m\u00eame fonction dans un ordinateur qu'une feuille de papier.</p> <p>Nous verrons quand nous utiliserons un langage de programmation que chaque repr\u00e9sentation d'un objet ou d'un concept du monde r\u00e9el n\u00e9cessitera l'utilisation d'une abstraction donn\u00e9e par le langage.</p>"},{"location":"introduction-outils/installation/#les-principales-couches-logicielles","title":"Les principales couches logicielles","text":"<p>Comme mentionn\u00e9 pr\u00e9c\u00e9demment, peu de personnes codent des programmes qui interagissent directement avec des composantes mat\u00e9rielles. On s'appuie plut\u00f4t sur des programmes existants pour faciliter l'\u00e9criture des programmes. La figure ci-dessous illustre 4 des couches pertinentes dans le d\u00e9veloppement d'un programme Python.</p> <pre><code>graph TD\n    A[Programme Python] --&gt; E[Interpr\u00e9teur Python] --&gt; B[Syst\u00e8me d'exploitation] --&gt; D[Couche mat\u00e9rielle]</code></pre> Les diff\u00e9rentes couches logicielles <p>La couche la plus \u00e9lev\u00e9e, Programme Python, correspond au programme \u00e9crit et que l'on souhaite utiliser. On dit alors que Python est un langage de haut niveau. Le code source de ce fichier est transmis \u00e0 l'interpr\u00e9teur Python qui transforme le code source lisible par les humains en une s\u00e9rie d'instructions destin\u00e9es au syst\u00e8me d'exploitation (couche suivante). L'interpr\u00e9teur est le programme \u00ab\u00a0python 3.12.exe\u00a0\u00bb dont nous verrons l'installation dans de la prochaine section. Sans ce programme, les codes \u00e9crits en Python ne peuvent \u00eatre trait\u00e9s par la machine. </p> <p>Le syst\u00e8me d'exploitation est le logiciel responsable de l'organisation et de la gestion des ressources d'un ordinateur. Ils sont principalement issus de l'une des trois grandes familles : Windows, Mac ou Linux. Chacun des syst\u00e8mes d'exploitation d\u00e9finit un jeu d'instructions diff\u00e9rent (mais qui fait sensiblement la m\u00eame chose). Sans notre interpr\u00e9teur il faudrait \u00e9crire un programme diff\u00e9rent pour chaque syst\u00e8me d'exploitation. Il peut quand m\u00eame exister des diff\u00e9rences l\u00e9g\u00e8res et rares entre un programme d\u00e9velopp\u00e9 pour deux syst\u00e8mes d'exploitation diff\u00e9rents (principalement entre Windows et les autres), mais elles se g\u00e8rent facilement et elles entra\u00eenent rarement des probl\u00e8mes bloquants.</p> Syst\u00e8me d'exploitation <p>En anglais, le terme Operating System est employ\u00e9 pour d\u00e9signer le syst\u00e8me d'exploitation. M\u00eame en fran\u00e7ais nous avons tendance \u00e0 faire r\u00e9f\u00e9rence au syst\u00e8me d'exploitation en utilisant l'acronyme OS.  </p> <p>Finalement, le syst\u00e8me d'exploitation transmet les instructions aux composantes mat\u00e9rielles qui les ex\u00e9cutent. Dans les faits, il peut y avoir plusieurs couches interm\u00e9diaires entre le syst\u00e8me d'exploitation et les composantes mat\u00e9rielles. Chaque couche utilise un jeu d'instructions de plus en plus \u00e9l\u00e9mentaire. Ce n'est toutefois pas n\u00e9cessaire de s'y int\u00e9resser pour comprendre le fonctionnement d'un langage de haut niveau comme Python.</p>"},{"location":"introduction-outils/installation/#realiser-linstallation","title":"R\u00e9aliser l'installation","text":"<p>Thonny est un environnement de d\u00e9veloppement int\u00e9gr\u00e9 (IDE) propose une interface simplifi\u00e9e pour apprendre la programmation dans le langage Python. C'est cet environnement qui sera utilis\u00e9 dans le cours 420-SN1-RE Programmation en sciences. Pour les personnes habiles avec un autre environnement de d\u00e9veloppement en Python (VSCode, PyCharm ou la ligne de commande), il est tout \u00e0 fait possible de suivre le cours avec ces environnements, mais les captures d'\u00e9crans et les proc\u00e9dures seront expliqu\u00e9es que pour l'environnement Thonny.</p> <p>Pour t\u00e9l\u00e9charger Thonny, il faut se rendre sur la page officielle de Thonny. En passant la souris au-dessus du nom du syst\u00e8me d'exploitation de votre ordinateur en haut \u00e0 gauche, vous verrez une fen\u00eatre s'ouvrir. Il faut cliquer sur le premier lien (Installer with 64-bit Python 3.10). Ce lien permet d'installer Python en m\u00eame temps que Thonny sans devoir faire plus de manipulation</p> T\u00e9l\u00e9charger Thonny \u00e0 partir du site officiel <p>Une fois le t\u00e9l\u00e9chargement compl\u00e9t\u00e9, on lance l'assistant d'installation qui affiche une fen\u00eatre qui demande pour qui r\u00e9aliser l'installation. Si vous avez les droits d'administrateur sur la machine ou que vous \u00eates la seule personne qui l'utilise je sugg\u00e8re l'option Install for all users, sinon l'option Install for me only fonctionne aussi tr\u00e8s bien. Votre syst\u00e8me d'exploitation vous affichera une notification de s\u00e9curit\u00e9 si vous avez s\u00e9lectionn\u00e9 Install for all users, il faut appuyer sur Oui pour permettre \u00e0 Thonny de s'installer. </p> S\u00e9lection des modes d'installation de Thonny <p>Ensuite, il faut suivre les \u00e9tape en appuyant sur *Next dans le bas de la fen\u00eatre jusqu'\u00e0 ce que vous ayez la fen\u00eatre suivante qui confirme l'installation correcte.</p> Confirmation d'installation avec succ\u00e8s de Thonny <p>Si vous lancez Thonny apr\u00e8s son installation, vous devriez voir s'afficher la fen\u00eatre suivante. </p> Interface au d\u00e9marrage de Thonny"},{"location":"introduction-outils/installation/#concepts-cles-de-la-section","title":"Concepts cl\u00e9s de la section","text":"<code>Langage de programmation</code> Langage compr\u00e9hensible par des humains qui sert \u00e0 exprimer la structure d'un programme ex\u00e9cutable par un ordinateur.  <code>Abstraction</code> Repr\u00e9sentation d'un concept tangible ou tir\u00e9 du monde r\u00e9el par une construction logicielle. <code>Syst\u00e8me d'exploitation</code> Programme qui g\u00e8re l'acc\u00e8s aux ressources de la machine. <code>Interpr\u00e9tation d'un code source</code> Op\u00e9ration dans laquelle un code source est transform\u00e9 en instructions qui peuvent \u00eatre trait\u00e9es par la machine (en particulier son syst\u00e8me d'exploitation)."},{"location":"introduction-outils/introduction/","title":"Introduction","text":""},{"location":"introduction-outils/introduction/#introduction-ce-quest-un-ordinateur-et-quen-faisons-nous","title":"Introduction - ce qu'est un ordinateur et qu'en faisons-nous","text":"<p> Objectifs de la section</p> <p>Expliquer sommairement le fonctionnement d\u2019un ordinateur Identifier certaines limites des ordinateurs</p> <p> Temps requis</p> <p>10 minutes</p>"},{"location":"introduction-outils/introduction/#caracteristiques-des-ordinateurs","title":"Caract\u00e9ristiques des ordinateurs","text":"<p>Le premier \u00ab ordinateur \u00bb de l'histoire est la machine d'Anticyth\u00e8re (autour du III<sup>e</sup> ou du II<sup>e</sup> si\u00e8cle av. J.-C.) qui servait dans le calcul des \u00e9clipses. Il s'agit d'un ordinateur analogique, car il y a des donn\u00e9es (entr\u00e9e) fournies dans une machine qui ensuite exprime le r\u00e9sultat (sortie). </p> <p>La machine elle-m\u00eame effectue un calcul avec les entr\u00e9es fournies, sous le principe de la bo\u00eete noire, principe selon lequel on peut utiliser un appareil sans conna\u00eetre son fonctionnement interne. </p> Fragment de la machine d'Anticyth\u00e8re (Marsyas, 2005) <p>Cette anecdote permet d'extraire les caract\u00e9ristiques qu'il est n\u00e9cessaire de constater dans un objet pour \u00eatre un ordinateur :</p> <ul> <li>Accepte des donn\u00e9es (entr\u00e9e)</li> <li>Fournit une r\u00e9ponse (sortie)</li> <li>Effectue un calcul (traitement)</li> <li>Conserve de l'information (stockage)</li> <li>Op\u00e8re automatiquement (bo\u00eete noire)</li> </ul> <p>La t\u00e2che d'une programmeuse ou d'un programmeur est d'utiliser les quatre premi\u00e8res caract\u00e9ristiques dans le but de concevoir une m\u00e9thode de traitement syst\u00e9matique (appel\u00e9 algorithme) des informations pour obtenir le r\u00e9sultat. Le d\u00e9veloppement d'un syst\u00e8me est donc r\u00e9alis\u00e9 en bo\u00eete blanche et n\u00e9cessite de comprendre le fonctionnement de la machine (ou du moins de certaines parties comme nous le verrons plus tard).</p>"},{"location":"introduction-outils/introduction/#les-principales-composantes","title":"Les principales composantes","text":"<p>Les ordinateurs modernes sont compos\u00e9s des pi\u00e8ces suivantes :</p> <code>Carte m\u00e8re</code> La carte m\u00e8re est la pi\u00e8ce centrale de l'ordinateur. Elle relie l'information entre les diff\u00e9rentes pi\u00e8ces. C'est aussi elle qui contient le BIOS, le logiciel responsable du d\u00e9marrage de l'ordinateur. <code>Processeur</code> Le processeur effectue des comparaisons entre deux signaux \u00e9lectriques (pareil ou diff\u00e9rent) et d'inverser un signal \u00e9lectrique. Ces deux op\u00e9rations logiques peuvent \u00eatre combin\u00e9es pour obtenir l'ensemble des op\u00e9rations arithm\u00e9tiques et logiques. <code>M\u00e9moire RAM</code> La m\u00e9moire RAM est la m\u00e9moire de travail de l'ordinateur dans laquelle sont enregistr\u00e9es les donn\u00e9es sur lesquels l'ordinateur travaille. On peut voir le chargement d'un fichier dans la m\u00e9moire RAM comme laisser une feuille trainer sur son bureau. C'est plus rapide d'y avoir acc\u00e8s, mais le bordel peut s'installer rapidement. <code>M\u00e9moire secondaire (disque SSD, disque dur)</code> La m\u00e9moire secondaire est plus structur\u00e9e que la m\u00e9moire RAM, mais cette structure vient au co\u00fbt de la performance dans l'acc\u00e8s des informations. On peut voir la m\u00e9moire secondaire comme la fili\u00e8re dans lequel on place toutes nos feuilles, bien organis\u00e9es par dossier et tri\u00e9es en ordre alphab\u00e9tique. Se lever pour aller consulter une feuille ou y ranger une feuille est long, mais tout est bien ordonn\u00e9. <code>Carte graphique</code> La carte graphique est un processeur sp\u00e9cialis\u00e9 dans les calculs de triangles et de certains algorithmes li\u00e9s au calcul de projections d'\u00e9l\u00e9ments tridimensionnels sur un support bidimensionnel. <code>Moniteur</code> C'est le vrai bon terme pour d\u00e9signer l'\u00e9cran. <code>P\u00e9riph\u00e9riques d'entr\u00e9e</code> Toutes les composantes qui g\u00e9n\u00e8rent un signal qui peut \u00eatre interpr\u00e9t\u00e9 par l'ordinateur (clavier, souris, manette, \u00e9cran tactile)."},{"location":"introduction-outils/introduction/#le-processeur-celui-qui-soccupe-de-tout","title":"Le processeur : celui qui s'occupe de tout","text":"<p>Dans un ordinateur, tout est une comparaison ou une addition de nombres entiers. Le processeur effectue ces op\u00e9rations au niveau physique avec les signaux \u00e9lectriques (0V ou 5V). Le processeur fonctionne sur de cycles. \u00c0 chaque cycle, le processeur re\u00e7oit une information \u00e0 traiter, la traite et \u00e9met le signal \u00e9lectrique qui correspond \u00e0 la r\u00e9ponse du calcul. Les cycles sont r\u00e9gul\u00e9s par la vibration d'un cristal autour de la fr\u00e9quence 3 GHz qui permet d'effectuer, dans un cas optimal, 3 000 000 000 de calculs par secondes. </p> <p>En v\u00e9rit\u00e9, il y a toujours du temps d'attente du processeur (les autres pi\u00e8ces ne fonctionnent pas aussi rapidement), ce qui nous am\u00e8ne loin du cas optimal la plupart du temps.</p>"},{"location":"introduction-outils/introduction/#x86-ou-64-bits","title":"x86 ou 64 bits ?","text":"<p>Une caract\u00e9ristique d\u00e9terminante des processeurs est la fa\u00e7on dont ils repr\u00e9sentent les nombres entiers. Tous les nombres sont repr\u00e9sent\u00e9s en donn\u00e9e binaire. On appelle bit.  chaque position d'une donn\u00e9e binaire. Les \u00ab\u00a0vieux\u00a0\u00bb syst\u00e8mes repr\u00e9sentent les entiers en utilisant 32 bits, tandis que les syst\u00e8mes modernes utilisent plut\u00f4t une repr\u00e9sentation \u00e0 64 bits. Cette repr\u00e9sentation est appel\u00e9e l'architecture du processeur. Un syst\u00e8me 64 bits permet de traiter un plus grand volume de donn\u00e9es ou des donn\u00e9es plus volumineuses lors d'un cycle du processeur qu'un processeur 32 bits ne le permet. On r\u00e9f\u00e8re souvent aux processeurs avec une architecture 32 bits comme x86.</p> <p>D'o\u00f9 vient le nom x86</p> <p>Ce nom fait r\u00e9f\u00e9rence au processeur 8086, premier processeur lanc\u00e9 en 1978 par Intel. L'architecture du 8086 est encod\u00e9e sur... 16 bits ! Le nom x86 est rest\u00e9 pour d\u00e9signer plusieurs produits d'Intel dont le num\u00e9ro se termine par 86. Comme les processeurs Intel sur une architecture 32 bits ont occup\u00e9 une large part du march\u00e9 pendant pr\u00e8s de 20 ans, le nom s'est inscrit dans les moeurs de l'informatique pour d\u00e9signer les processeurs qui op\u00e8rent sur 32 bits.</p> <p>Un processeur 64 bits peut tout \u00e0 fait ex\u00e9cuter un programme cod\u00e9 pour un processeur 32 bits; la moiti\u00e9 des bits sont simplement inutilis\u00e9s. Cela entra\u00eene une sous-utilisation du processeur et ne permet pas d'en tirer pleinement profit. Le cas inverse est cependant impossible. Un processeur op\u00e9rant sur 32 bits ne peut pas ex\u00e9cuter un programme con\u00e7u pour un processeur 64 bits, car il devrait \u00e9liminer la moiti\u00e9 des donn\u00e9es, ce qui cause \u00e9videmment des probl\u00e8mes majeurs.</p> <p>Installer des logiciels</p> <p>Plusieurs sites de t\u00e9l\u00e9chargement offrent le choix d'installer la version 32 bits (x86) ou 64 bits d'un logiciel. Il faut faire attention lors du t\u00e9l\u00e9chargement pour s\u00e9lectionner la bonne version.</p> <p>Pour savoir quelle version du processeur est install\u00e9e dans l'ordinateur, on peut acc\u00e9der aux informations du syst\u00e8me en tapant Syst\u00e8me dans la barre de recherche sur Windows 10 ou Windows 11.</p> Fen\u00eatre d'information du syst\u00e8me sur Windows 11"},{"location":"introduction-outils/introduction/#dou-vient-la-discipline-informatique","title":"D'o\u00f9 vient la discipline informatique","text":"<p>Les premiers \u00e0 faire de \u00ab l'informatique \u00bb et qui ont b\u00e2ti les ordinateurs et les outils \u00e9taient principalement sp\u00e9cialistes du g\u00e9nie \u00e9lectrique ou \u00e9lectronique ainsi que des math\u00e9matiques. Ils ont d\u00e9fini les bases de l'ex\u00e9cution automatique de traitement par une machine (un ordinateur n'est, fondamentalement, pas plus qu'une bo\u00eete remplie de signaux \u00e9lectriques). Au d\u00e9but, des sp\u00e9cialistes de tous les domaines apprenaient l'informatique pour l'appliquer \u00e0 leur discipline. Aucun programme de premier cycle ne permettait d'apprendre l'informatique. Tranquillement, dans les ann\u00e9es 1970, une science s'est d\u00e9velopp\u00e9e autour de l'informatique, science qui comporte, encore \u00e0 ce jour, plusieurs facettes :</p> <ul> <li>Informatique th\u00e9orique (souvent simplement informatique) : branche qui \u00e9tudie les traitements et l'efficacit\u00e9 des calculs. On y retrouve, entre autres, le d\u00e9veloppement de l'intelligence artificielle et l'analyse de donn\u00e9es.</li> <li>G\u00e9nie informatique : g\u00e9nie qui fait le pont entre les composantes \u00e9lectriques et les syst\u00e8mes informatiques. Il traite de la transcription d'information num\u00e9rique en contenu intelligible pour un humain et de la communication entre les ordinateurs (r\u00e9seautique).</li> <li>G\u00e9nie des logiciels : g\u00e9nie qui touche la construction de syst\u00e8mes informatiques de petite \u00e0 grande \u00e9chelle, comme les sites web, les applications mobiles, les syst\u00e8mes natifs, les jeux vid\u00e9o...</li> <li>Informatique de gestion : application de l'informatique pour appuyer l'administration et la gestion, particuli\u00e8rement dans la gestion des donn\u00e9es d'entreprise et d'affaires. On utilise encore certaines fois le terme \u00ab~syst\u00e8me d'information~\u00bb pour d\u00e9signer un logiciel.</li> </ul> <p>Dans le cadre du cours, avec votre posture tant qu'\u00e9tudiante et \u00e9tudiant en sciences, nous prendrons l'approche de l'informatique th\u00e9orique dans le cadre d'analyse de donn\u00e9es appartenant \u00e0 d'autres domaines des sciences.</p> <p>L'origine du terme informatique</p> <p>Le terme informatique provient de la branche des math\u00e9matiques \u00e9ponyme (un peu comme les statistiques, l'alg\u00e8bre et l'analyse sont des branches des math\u00e9matiques) qui traitait de la gestion et la codification de l'information. Le terme est rest\u00e9 pour en faire une discipline \u00e0 part enti\u00e8re, mais encore tr\u00e8s proche des math\u00e9matiques.</p>"},{"location":"introduction-outils/introduction/#quelques-personnages-celebres","title":"Quelques personnages c\u00e9l\u00e8bres","text":"<ul> <li>George Boole (1815-1864) : math\u00e9maticien anglais qui fonde la logique moderne qui repose sur une alg\u00e8bre particuli\u00e8re, d\u00e9nomm\u00e9e en son honneur Alg\u00e8bre de Boole. Les ordinateurs exploitent cette alg\u00e8bre pour parvenir \u00e0 r\u00e9aliser leurs calculs.  </li> <li>John Von Neumann (1903-1957) : math\u00e9maticien hongrois qui propose la structure d'ordinateur encore utilis\u00e9 aujourd'hui. Il a aussi d\u00e9fini une classe d'automates autoreproducteurs qui ont inspir\u00e9 d'autres mod\u00e8les comme celui de l'ADN et de la reproduction cellulaire.   </li> <li>Alonzo Church (1903-1995) : math\u00e9maticien am\u00e9ricain qui a r\u00e9alis\u00e9 des d\u00e9monstrations sur la possibilit\u00e9 de faire des calculs m\u00e9caniquement et d\u00e9finit la Th\u00e8se de Church-Turing, fondamentale dans le passage des calculs humains aux calculs automatis\u00e9s.</li> <li>Alan Turing (1912-1954) : math\u00e9maticien anglais qui pose les bases d'une machine \u00e0 calculer automatiquement et pionnier de l'intelligence artificielle.</li> <li>Margaret Hamilton (1936-...) : ing\u00e9nieure am\u00e9ricaine qui \u00e9tait responsable de l'\u00e9quipe de d\u00e9veloppement du logiciel embarqu\u00e9 pour les missions Apollo. Elle a contribu\u00e9 \u00e0 fonder et formaliser la branche de l'informatique qu'est le g\u00e9nie logiciel.  </li> </ul>"},{"location":"introduction-outils/introduction/#concepts-cles-de-la-section","title":"Concepts cl\u00e9s de la section","text":"<code>Bo\u00eete blanche et bo\u00eete noire</code> Principe de conception selon lequel on conna\u00eet la fa\u00e7on dont les donn\u00e9es sont trait\u00e9es (bo\u00eete blanche) ou non (bo\u00eete noire). <code>Composantes de l'ordinateur</code> Plusieurs composantes sp\u00e9cialis\u00e9es interviennent dans l'ex\u00e9cution d'un programme. Les op\u00e9rations de transport des donn\u00e9es entre les composantes et les op\u00e9rations de synchronisation sont complexes et peuvent occasionner des ralentissements dans l'ex\u00e9cution. <code>Architectures</code> Certains programmes sont con\u00e7us pour s'ex\u00e9cuter sur certains types de processeurs. Il faut \u00eatre attentif lors de l'installation du logiciel pour s\u00e9lectionner la bonne version."},{"location":"introduction-outils/personnel-enseignant/","title":"Personnel enseignant","text":""},{"location":"introduction-outils/personnel-enseignant/#personnel-enseignant","title":"Personnel enseignant","text":""},{"location":"introduction-outils/personnel-enseignant/#cirine-chaieb","title":"Cirine Chaieb","text":""},{"location":"introduction-outils/personnel-enseignant/#francois-mercier","title":"Fran\u00e7ois Mercier","text":"<p>J'enseigne au C\u00e9gep depuis ao\u00fbt 2021, principalement en Techniques de l'informatique. J'ai  obtenu mot baccalaur\u00e9at en informatique en 1998 (ce qui, sur une \u00e9chelle g\u00e9ologique, est tr\u00e8s r\u00e9cent).</p> <p>J'ai travaill\u00e9 essentiellement comme d\u00e9veloppeur web et administrateur syst\u00e8me pendant 25 ans, pour une compagnie de multim\u00e9dia montr\u00e9alaise et deux entreprises manufacturi\u00e8res de la r\u00e9gion.  </p>"},{"location":"introduction-outils/personnel-enseignant/#mes-contacts","title":"Mes contacts","text":"<p> Par Teams ou Mio  mercier.francois@cegepvicto.ca</p> <p>R\u00e9seautage : </p>"},{"location":"introduction-outils/personnel-enseignant/#mes-disponibilites","title":"Mes disponibilit\u00e9s","text":"<p>Mon local est le C-207. Pour prendre rendez-vous, consulez la section de mes disponibilit\u00e9s sur L\u00e9a.</p>"},{"location":"introduction-outils/personnel-enseignant/#alexandre-ouellet","title":"Alexandre Ouellet","text":"<p>J'enseigne au C\u00e9gep depuis janvier 2021, principalement en Techniques de l'informatique. Durant mes \u00e9tudes, j'ai travaill\u00e9 longtemps \u00e0 temps partiel comme assistant d'enseignement et charg\u00e9 de cours, si bien que je travaille en enseignement sup\u00e9rieur depuis maintenant 9 ans. Au niveau formation, j'ai compl\u00e9t\u00e9 le baccalaur\u00e9at en math\u00e9matiques et le baccalaur\u00e9at en informatique \u00e0 l'UQTR (2018). J'ai par la suite fait ma ma\u00eetrise en math\u00e9matiques et informatique appliqu\u00e9s (2021) toujours \u00e0 l'UQTR. Mes sujets de pr\u00e9dilections en informatique sont : le g\u00e9nie logiciel, les processus de qualit\u00e9, l'intelligence artificielle et les jeux vid\u00e9os. En 2024, j'ai compl\u00e9t\u00e9 le Microprogrammation d'insertion professionnelle en enseignement coll\u00e9gial avec l'Universit\u00e9 de Sherbrooke. Je coordonne \u00e9galement le d\u00e9partement d'informatique.</p> <p>Au niveau personnel, je suis natif de Sherbrooke - j'ai d\u00e9m\u00e9nag\u00e9 \u00e0 Victoriaville pour pouvoir travailler au C\u00e9gep. Je pratique la course, le v\u00e9lo de route, le v\u00e9lo-camping et le Ultimate Frisbee. J'ai des int\u00e9r\u00eats pour les jeux vid\u00e9os, les jeux de soci\u00e9t\u00e9, les jeux de r\u00f4le et le monde de l'aviation.</p>"},{"location":"introduction-outils/personnel-enseignant/#mes-contacts_1","title":"Mes contacts","text":"<p> Par Teams  ouellet.alexandre@cegepvicto.ca  MIO</p> <p>R\u00e9seautage : </p>"},{"location":"introduction-outils/personnel-enseignant/#mes-disponibilites_1","title":"Mes disponibilit\u00e9s","text":"<p>(Vert : disponible - jaune : parfois disponible - rouge : toujours indisponible - bleu : p\u00e9riode du cours)</p> <p></p>"}]}